{
  "$schema" : "http://json-schema.org/draft-04/schema#",
  "type" : "array",
  "items" : {
    "maxProperties" : 1,
    "definitions" : {
      "org.apache.camel.model.ProcessorDefinition" : {
        "type" : "object",
        "maxProperties" : 1,
        "properties" : {
          "aggregate" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.AggregateDefinition"
          },
          "bean" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.BeanDefinition"
          },
          "do-catch" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.CatchDefinition"
          },
          "doCatch" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.CatchDefinition"
          },
          "choice" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ChoiceDefinition"
          },
          "circuit-breaker" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.CircuitBreakerDefinition"
          },
          "circuitBreaker" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.CircuitBreakerDefinition"
          },
          "claim-check" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ClaimCheckDefinition"
          },
          "claimCheck" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ClaimCheckDefinition"
          },
          "convert-body-to" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ConvertBodyDefinition"
          },
          "convertBodyTo" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ConvertBodyDefinition"
          },
          "delay" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.DelayDefinition"
          },
          "dynamic-router" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.DynamicRouterDefinition"
          },
          "dynamicRouter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.DynamicRouterDefinition"
          },
          "enrich" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.EnrichDefinition"
          },
          "filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.FilterDefinition"
          },
          "do-finally" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.FinallyDefinition"
          },
          "doFinally" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.FinallyDefinition"
          },
          "idempotent-consumer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.IdempotentConsumerDefinition"
          },
          "idempotentConsumer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.IdempotentConsumerDefinition"
          },
          "intercept" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.InterceptDefinition"
          },
          "intercept-from" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.InterceptFromDefinition"
          },
          "interceptFrom" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.InterceptFromDefinition"
          },
          "intercept-send-to-endpoint" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.InterceptSendToEndpointDefinition"
          },
          "interceptSendToEndpoint" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.InterceptSendToEndpointDefinition"
          },
          "kamelet" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.KameletDefinition"
          },
          "load-balance" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.LoadBalanceDefinition"
          },
          "loadBalance" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.LoadBalanceDefinition"
          },
          "log" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.LogDefinition"
          },
          "loop" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.LoopDefinition"
          },
          "marshal" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.MarshalDefinition"
          },
          "multicast" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.MulticastDefinition"
          },
          "on-completion" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.OnCompletionDefinition"
          },
          "onCompletion" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.OnCompletionDefinition"
          },
          "on-fallback" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.OnFallbackDefinition"
          },
          "onFallback" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.OnFallbackDefinition"
          },
          "otherwise" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.OtherwiseDefinition"
          },
          "pausable" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.PausableDefinition"
          },
          "pipeline" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.PipelineDefinition"
          },
          "policy" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.PolicyDefinition"
          },
          "poll-enrich" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.PollEnrichDefinition"
          },
          "pollEnrich" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.PollEnrichDefinition"
          },
          "process" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ProcessDefinition"
          },
          "recipient-list" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RecipientListDefinition"
          },
          "recipientList" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RecipientListDefinition"
          },
          "remove-header" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemoveHeaderDefinition"
          },
          "removeHeader" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemoveHeaderDefinition"
          },
          "remove-headers" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemoveHeadersDefinition"
          },
          "removeHeaders" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemoveHeadersDefinition"
          },
          "remove-properties" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemovePropertiesDefinition"
          },
          "removeProperties" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemovePropertiesDefinition"
          },
          "remove-property" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemovePropertyDefinition"
          },
          "removeProperty" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RemovePropertyDefinition"
          },
          "resequence" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ResequenceDefinition"
          },
          "resumable" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ResumableDefinition"
          },
          "rollback" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RollbackDefinition"
          },
          "routing-slip" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RoutingSlipDefinition"
          },
          "routingSlip" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RoutingSlipDefinition"
          },
          "saga" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SagaDefinition"
          },
          "sample" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SamplingDefinition"
          },
          "script" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ScriptDefinition"
          },
          "set-body" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetBodyDefinition"
          },
          "setBody" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetBodyDefinition"
          },
          "set-exchange-pattern" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetExchangePatternDefinition"
          },
          "setExchangePattern" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetExchangePatternDefinition"
          },
          "set-header" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetHeaderDefinition"
          },
          "setHeader" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetHeaderDefinition"
          },
          "set-property" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetPropertyDefinition"
          },
          "setProperty" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SetPropertyDefinition"
          },
          "sort" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SortDefinition"
          },
          "split" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.SplitDefinition"
          },
          "step" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.StepDefinition"
          },
          "stop" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.StopDefinition"
          },
          "threads" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ThreadsDefinition"
          },
          "throttle" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ThrottleDefinition"
          },
          "throw-exception" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ThrowExceptionDefinition"
          },
          "throwException" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ThrowExceptionDefinition"
          },
          "to" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDefinition"
          },
          "to-d" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDynamicDefinition"
          },
          "toD" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDynamicDefinition"
          },
          "transacted" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.TransactedDefinition"
          },
          "transform" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.TransformDefinition"
          },
          "do-try" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.TryDefinition"
          },
          "doTry" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.TryDefinition"
          },
          "unmarshal" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.UnmarshalDefinition"
          },
          "validate" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ValidateDefinition"
          },
          "when" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.WhenDefinition"
          },
          "when-skip-send-to-endpoint" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.WhenSkipSendToEndpointDefinition"
          },
          "whenSkipSendToEndpoint" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.WhenSkipSendToEndpointDefinition"
          },
          "wire-tap" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.WireTapDefinition"
          },
          "wireTap" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.WireTapDefinition"
          },
          "service-call" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ServiceCallDefinition"
          },
          "serviceCall" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ServiceCallDefinition"
          }
        }
      },
      "org.apache.camel.dsl.yaml.deserializers.BeansDeserializer" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/items/definitions/org.apache.camel.model.app.RegistryBeanDefinition"
        }
      },
      "org.apache.camel.dsl.yaml.deserializers.ErrorHandlerBuilderDeserializer" : {
        "type" : "object",
        "properties" : {
          "dead-letter-channel" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.DeadLetterChannelDefinition"
          },
          "default-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.DefaultErrorHandlerDefinition"
          },
          "jta-transaction-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.JtaTransactionErrorHandlerDefinition"
          },
          "no-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.NoErrorHandlerDefinition"
          },
          "ref-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.RefErrorHandlerDefinition"
          },
          "spring-transaction-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.SpringTransactionErrorHandlerDefinition"
          }
        }
      },
      "org.apache.camel.dsl.yaml.deserializers.OutputAwareFromDefinition" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "uri" : {
            "type" : "string"
          }
        },
        "required" : [ "steps", "uri" ]
      },
      "org.apache.camel.dsl.yaml.deserializers.RouteFromDefinitionDeserializer" : {
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.dsl.yaml.deserializers.OutputAwareFromDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "uri" : {
            "type" : "string"
          }
        },
        "required" : [ "steps", "uri" ]
      },
      "org.apache.camel.model.AggregateDefinition" : {
        "title" : "Aggregate",
        "description" : "Aggregates many messages into a single message",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "aggregate-controller" : {
            "type" : "string",
            "description" : "To use a org.apache.camel.processor.aggregate.AggregateController to allow external sources to control this aggregator.",
            "title" : "Aggregate Controller"
          },
          "aggregation-repository" : {
            "type" : "string",
            "description" : "The AggregationRepository to use. Sets the custom aggregate repository to use. Will by default use org.apache.camel.processor.aggregate.MemoryAggregationRepository",
            "title" : "Aggregation Repository"
          },
          "aggregation-strategy" : {
            "type" : "string",
            "description" : "The AggregationStrategy to use. For example to lookup a bean with the name foo, the value is simply just #bean:foo. Configuring an AggregationStrategy is required, and is used to merge the incoming Exchange with the existing already merged exchanges. At first call the oldExchange parameter is null. On subsequent invocations the oldExchange contains the merged exchanges and newExchange is of course the new incoming Exchange.",
            "title" : "Aggregation Strategy"
          },
          "aggregation-strategy-method-allow-null" : {
            "type" : "boolean",
            "description" : "If this option is false then the aggregate method is not used for the very first aggregation. If this option is true then null values is used as the oldExchange (at the very first aggregation), when using beans as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Allow Null"
          },
          "aggregation-strategy-method-name" : {
            "type" : "string",
            "description" : "This option can be used to explicit declare the method name to use, when using beans as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Name"
          },
          "close-correlation-key-on-completion" : {
            "type" : "number",
            "description" : "Closes a correlation key when its complete. Any late received exchanges which has a correlation key that has been closed, it will be defined and a ClosedCorrelationKeyException is thrown.",
            "title" : "Close Correlation Key On Completion"
          },
          "complete-all-on-stop" : {
            "type" : "boolean",
            "description" : "Indicates to wait to complete all current and partial (pending) aggregated exchanges when the context is stopped. This also means that we will wait for all pending exchanges which are stored in the aggregation repository to complete so the repository is empty before we can stop. You may want to enable this when using the memory based aggregation repository that is memory based only, and do not store data on disk. When this option is enabled, then the aggregator is waiting to complete all those exchanges before its stopped, when stopping CamelContext or the route using it.",
            "title" : "Complete All On Stop"
          },
          "completion-from-batch-consumer" : {
            "type" : "boolean",
            "description" : "Enables the batch completion mode where we aggregate from a org.apache.camel.BatchConsumer and aggregate the total number of exchanges the org.apache.camel.BatchConsumer has reported as total by checking the exchange property org.apache.camel.Exchange#BATCH_COMPLETE when its complete. This option cannot be used together with discardOnAggregationFailure.",
            "title" : "Completion From Batch Consumer"
          },
          "completion-interval" : {
            "type" : "string",
            "description" : "A repeating period in millis by which the aggregator will complete all current aggregated exchanges. Camel has a background task which is triggered every period. You cannot use this option together with completionTimeout, only one of them can be used.",
            "title" : "Completion Interval"
          },
          "completion-on-new-correlation-group" : {
            "type" : "boolean",
            "description" : "Enables completion on all previous groups when a new incoming correlation group. This can for example be used to complete groups with same correlation keys when they are in consecutive order. Notice when this is enabled then only 1 correlation group can be in progress as when a new correlation group starts, then the previous groups is forced completed.",
            "title" : "Completion On New Correlation Group"
          },
          "completion-predicate" : {
            "description" : "A Predicate to indicate when an aggregated exchange is complete. If this is not specified and the AggregationStrategy object implements Predicate, the aggregationStrategy object will be used as the completionPredicate.",
            "title" : "Completion Predicate",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "completion-size" : {
            "type" : "number",
            "description" : "Number of messages aggregated before the aggregation is complete. This option can be set as either a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result. If both are set Camel will fallback to use the fixed value if the Expression result was null or 0.",
            "title" : "Completion Size"
          },
          "completion-size-expression" : {
            "description" : "Number of messages aggregated before the aggregation is complete. This option can be set as either a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result. If both are set Camel will fallback to use the fixed value if the Expression result was null or 0.",
            "title" : "Completion Size Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "completion-timeout" : {
            "type" : "string",
            "description" : "Time in millis that an aggregated exchange should be inactive before its complete (timeout). This option can be set as either a fixed value or using an Expression which allows you to evaluate a timeout dynamically - will use Long as result. If both are set Camel will fallback to use the fixed value if the Expression result was null or 0. You cannot use this option together with completionInterval, only one of the two can be used. By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option to configure how frequently to run the checker. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals.",
            "title" : "Completion Timeout"
          },
          "completion-timeout-checker-interval" : {
            "type" : "string",
            "description" : "Interval in millis that is used by the background task that checks for timeouts ( org.apache.camel.TimeoutMap ). By default the timeout checker runs every second. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals.",
            "title" : "Completion Timeout Checker Interval",
            "default" : "1000"
          },
          "completion-timeout-expression" : {
            "description" : "Time in millis that an aggregated exchange should be inactive before its complete (timeout). This option can be set as either a fixed value or using an Expression which allows you to evaluate a timeout dynamically - will use Long as result. If both are set Camel will fallback to use the fixed value if the Expression result was null or 0. You cannot use this option together with completionInterval, only one of the two can be used. By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option to configure how frequently to run the checker. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals.",
            "title" : "Completion Timeout Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "correlation-expression" : {
            "description" : "The expression used to calculate the correlation key to use for aggregation. The Exchange which has the same correlation key is aggregated together. If the correlation key could not be evaluated an Exception is thrown. You can disable this by using the ignoreBadCorrelationKeys option.",
            "title" : "Correlation Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "discard-on-aggregation-failure" : {
            "type" : "boolean",
            "description" : "Discards the aggregated message when aggregation failed (an exception was thrown from AggregationStrategy . This means the partly aggregated message is dropped and not sent out of the aggregator. This option cannot be used together with completionFromBatchConsumer.",
            "title" : "Discard On Aggregation Failure"
          },
          "discard-on-completion-timeout" : {
            "type" : "boolean",
            "description" : "Discards the aggregated message on completion timeout. This means on timeout the aggregated message is dropped and not sent out of the aggregator.",
            "title" : "Discard On Completion Timeout"
          },
          "eager-check-completion" : {
            "type" : "boolean",
            "description" : "Use eager completion checking which means that the completionPredicate will use the incoming Exchange. As opposed to without eager completion checking the completionPredicate will use the aggregated Exchange.",
            "title" : "Eager Check Completion"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "If using parallelProcessing you can specify a custom thread pool to be used. In fact also if you are not using parallelProcessing this custom thread pool is used to send out aggregated exchanges as well.",
            "title" : "Executor Service"
          },
          "force-completion-on-stop" : {
            "type" : "boolean",
            "description" : "Indicates to complete all current aggregated exchanges when the context is stopped",
            "title" : "Force Completion On Stop"
          },
          "id" : {
            "type" : "string"
          },
          "ignore-invalid-correlation-keys" : {
            "type" : "boolean",
            "description" : "If a correlation key cannot be successfully evaluated it will be ignored by logging a DEBUG and then just ignore the incoming Exchange.",
            "title" : "Ignore Invalid Correlation Keys"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "optimistic-lock-retry-policy" : {
            "description" : "Allows to configure retry settings when using optimistic locking.",
            "title" : "Optimistic Lock Retry Policy",
            "$ref" : "#/items/definitions/org.apache.camel.model.OptimisticLockRetryPolicyDefinition"
          },
          "optimistic-locking" : {
            "type" : "boolean",
            "description" : "Turns on using optimistic locking, which requires the aggregationRepository being used, is supporting this by implementing org.apache.camel.spi.OptimisticLockingAggregationRepository .",
            "title" : "Optimistic Locking"
          },
          "parallel-processing" : {
            "type" : "boolean",
            "description" : "When aggregated are completed they are being send out of the aggregator. This option indicates whether or not Camel should use a thread pool with multiple threads for concurrency. If no custom thread pool has been specified then Camel creates a default pool with 10 concurrent threads.",
            "title" : "Parallel Processing"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "timeout-checker-executor-service" : {
            "type" : "string",
            "description" : "If using either of the completionTimeout, completionTimeoutExpression, or completionInterval options a background thread is created to check for the completion for every aggregator. Set this option to provide a custom thread pool to be used rather than creating a new thread for every aggregator.",
            "title" : "Timeout Checker Executor Service"
          }
        },
        "required" : [ "aggregation-strategy" ]
      },
      "org.apache.camel.model.BeanDefinition" : {
        "title" : "Bean",
        "description" : "Calls a Java bean",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "bean-type" : {
              "type" : "string",
              "description" : "Sets the class name (fully qualified) of the bean to use",
              "title" : "Bean Type"
            },
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "method" : {
              "type" : "string",
              "description" : "Sets the method name on the bean to use",
              "title" : "Method"
            },
            "ref" : {
              "type" : "string",
              "description" : "Sets a reference to an exiting bean to use, which is looked up from the registry",
              "title" : "Ref"
            },
            "scope" : {
              "type" : "string",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "title" : "Scope",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ]
            }
          }
        } ]
      },
      "org.apache.camel.model.CatchDefinition" : {
        "title" : "Do Catch",
        "description" : "Catches exceptions as part of a try, catch, finally block",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "exception" : {
            "type" : "array",
            "description" : "The exception(s) to catch.",
            "title" : "Exception",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "on-when" : {
            "description" : "Sets an additional predicate that should be true before the onCatch is triggered. To be used for fine grained controlling whether a thrown exception should be intercepted by this exception type or not.",
            "title" : "On When",
            "$ref" : "#/items/definitions/org.apache.camel.model.WhenDefinition"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.ChoiceDefinition" : {
        "title" : "Choice",
        "description" : "Route messages based on a series of predicates",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "otherwise" : {
            "description" : "Sets the otherwise node",
            "title" : "Otherwise",
            "$ref" : "#/items/definitions/org.apache.camel.model.OtherwiseDefinition"
          },
          "precondition" : {
            "type" : "boolean",
            "description" : "Indicates whether this Choice EIP is in precondition mode or not. If so its branches (when/otherwise) are evaluated during startup to keep at runtime only the branch that matched.",
            "title" : "Precondition"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "when" : {
            "type" : "array",
            "description" : "Sets the when nodes",
            "title" : "When",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.WhenDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.CircuitBreakerDefinition" : {
        "title" : "Circuit Breaker",
        "description" : "Route messages in a fault tolerance way using Circuit Breaker",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "configuration" : {
            "type" : "string",
            "description" : "Refers to a circuit breaker configuration (such as resillience4j, or microprofile-fault-tolerance) to use for configuring the circuit breaker EIP.",
            "title" : "Configuration"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "fault-tolerance-configuration" : {
            "description" : "Configures the circuit breaker to use MicroProfile Fault Tolerance with the given configuration.",
            "title" : "Fault Tolerance Configuration",
            "$ref" : "#/items/definitions/org.apache.camel.model.FaultToleranceConfigurationDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "on-fallback" : {
            "description" : "The fallback route path to execute that does not go over the network. This should be a static or cached result that can immediately be returned upon failure. If the fallback requires network connection then use onFallbackViaNetwork() .",
            "title" : "On Fallback",
            "$ref" : "#/items/definitions/org.apache.camel.model.OnFallbackDefinition"
          },
          "resilience4j-configuration" : {
            "description" : "Configures the circuit breaker to use Resilience4j with the given configuration.",
            "title" : "Resilience4j Configuration",
            "$ref" : "#/items/definitions/org.apache.camel.model.Resilience4jConfigurationDefinition"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.ClaimCheckDefinition" : {
        "title" : "Claim Check",
        "description" : "The Claim Check EIP allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "aggregation-strategy" : {
            "type" : "string",
            "description" : "To use a custom AggregationStrategy instead of the default implementation. Notice you cannot use both custom aggregation strategy and configure data at the same time.",
            "title" : "Aggregation Strategy"
          },
          "aggregation-strategy-method-name" : {
            "type" : "string",
            "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Name"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "filter" : {
            "type" : "string",
            "description" : "Specify a filter to control what data gets merged data back from the claim check repository. The following syntax is supported: body - to aggregate the message body attachments - to aggregate all the message attachments headers - to aggregate all the message headers header:pattern - to aggregate all the message headers that matches the pattern. The following pattern rules are applied in this order: exact match, returns true wildcard match (pattern ends with a and the name starts with the pattern), returns true regular expression match, returns true otherwise returns false You can specify multiple rules separated by comma. For example, the following includes the message body and all headers starting with foo: body,header:foo. The syntax supports the following prefixes which can be used to specify include,exclude, or remove - to include (which is the default mode) - - to exclude (exclude takes precedence over include) -- - to remove (remove takes precedence) For example to exclude a header name foo, and remove all headers starting with bar, -header:foo,--headers:bar Note you cannot have both include and exclude header:pattern at the same time.",
            "title" : "Filter"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "key" : {
            "type" : "string",
            "description" : "To use a specific key for claim check id (for dynamic keys use simple language syntax as the key).",
            "title" : "Key"
          },
          "operation" : {
            "type" : "string",
            "description" : "The claim check operation to use. The following operations are supported: Get - Gets (does not remove) the claim check by the given key. GetAndRemove - Gets and removes the claim check by the given key. Set - Sets a new (will override if key already exists) claim check with the given key. Push - Sets a new claim check on the stack (does not use key). Pop - Gets the latest claim check from the stack (does not use key).",
            "title" : "Operation",
            "enum" : [ "Get", "GetAndRemove", "Set", "Push", "Pop" ]
          }
        }
      },
      "org.apache.camel.model.ContextScanDefinition" : {
        "title" : "Context Scan",
        "description" : "Scans for Java org.apache.camel.builder.RouteBuilder instances in the context org.apache.camel.spi.Registry .",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "excludes" : {
            "type" : "array",
            "description" : "Exclude finding route builder from these java package names.",
            "title" : "Excludes",
            "items" : {
              "type" : "string"
            }
          },
          "include-non-singletons" : {
            "type" : "boolean",
            "description" : "Whether to include non-singleton beans (prototypes) By default only singleton beans is included in the context scan",
            "title" : "Include Non Singletons"
          },
          "includes" : {
            "type" : "array",
            "description" : "Include finding route builder from these java package names.",
            "title" : "Includes",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "org.apache.camel.model.ConvertBodyDefinition" : {
        "title" : "Convert Body To",
        "description" : "Converts the message body to another type",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "charset" : {
              "type" : "string",
              "description" : "To use a specific charset when converting",
              "title" : "Charset"
            },
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "mandatory" : {
              "type" : "boolean",
              "description" : "When mandatory then the conversion must return a value (cannot be null), if this is not possible then NoTypeConversionAvailableException is thrown. Setting this to false could mean conversion is not possible and the value is null.",
              "title" : "Mandatory"
            },
            "type" : {
              "type" : "string",
              "description" : "The java type to convert to",
              "title" : "Type"
            }
          }
        } ],
        "required" : [ "type" ]
      },
      "org.apache.camel.model.DataFormatDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.DelayDefinition" : {
        "title" : "Delay",
        "description" : "Delays processing for a specified length of time",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "async-delayed" : {
            "type" : "boolean",
            "description" : "Enables asynchronous delay which means the thread will not block while delaying.",
            "title" : "Async Delayed"
          },
          "caller-runs-when-rejected" : {
            "type" : "boolean",
            "description" : "Whether or not the caller should run the task when it was rejected by the thread pool. Is by default true",
            "title" : "Caller Runs When Rejected"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "To use a custom Thread Pool if asyncDelay has been enabled.",
            "title" : "Executor Service"
          },
          "expression" : {
            "description" : "Expression to define how long time to wait (in millis)",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          }
        }
      },
      "org.apache.camel.model.DynamicRouterDefinition" : {
        "title" : "Dynamic Router",
        "description" : "Route messages based on dynamic rules",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "cache-size" : {
            "type" : "number",
            "description" : "Sets the maximum size used by the org.apache.camel.spi.ProducerCache which is used to cache and reuse producers when using this dynamic router, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
            "title" : "Cache Size"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to call that returns the endpoint(s) to route to in the dynamic routing. Important: The expression will be called in a while loop fashion, until the expression returns null which means the dynamic router is finished.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "ignore-invalid-endpoints" : {
            "type" : "boolean",
            "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
            "title" : "Ignore Invalid Endpoints"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "uri-delimiter" : {
            "type" : "string",
            "description" : "Sets the uri delimiter to use",
            "title" : "Uri Delimiter",
            "default" : ","
          }
        }
      },
      "org.apache.camel.model.EnrichDefinition" : {
        "title" : "Enrich",
        "description" : "Enriches a message with data from a secondary resource",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "aggregate-on-exception" : {
            "type" : "boolean",
            "description" : "If this option is false then the aggregate method is not used if there was an exception thrown while trying to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what to do if there was an exception in the aggregate method. For example to suppress the exception or set a custom message body etc.",
            "title" : "Aggregate On Exception"
          },
          "aggregation-strategy" : {
            "type" : "string",
            "description" : "Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message. By default Camel will use the reply from the external service as outgoing message.",
            "title" : "Aggregation Strategy"
          },
          "aggregation-strategy-method-allow-null" : {
            "type" : "string",
            "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Allow Null"
          },
          "aggregation-strategy-method-name" : {
            "type" : "string",
            "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Name"
          },
          "allow-optimised-components" : {
            "type" : "boolean",
            "description" : "Whether to allow components to optimise enricher if they are org.apache.camel.spi.SendDynamicAware .",
            "title" : "Allow Optimised Components"
          },
          "cache-size" : {
            "type" : "number",
            "description" : "Sets the maximum size used by the org.apache.camel.spi.ProducerCache which is used to cache and reuse producer when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
            "title" : "Cache Size"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression that computes the endpoint uri to use as the resource endpoint to enrich from",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "ignore-invalid-endpoint" : {
            "type" : "boolean",
            "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
            "title" : "Ignore Invalid Endpoint"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "share-unit-of-work" : {
            "type" : "boolean",
            "description" : "Shares the org.apache.camel.spi.UnitOfWork with the parent and the resource exchange. Enrich will by default not share unit of work between the parent exchange and the resource exchange. This means the resource exchange has its own individual unit of work.",
            "title" : "Share Unit Of Work"
          }
        }
      },
      "org.apache.camel.model.ErrorHandlerDefinition" : {
        "title" : "Error Handler",
        "description" : "Camel error handling.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "dead-letter-channel" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.DeadLetterChannelDefinition"
          },
          "default-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.DefaultErrorHandlerDefinition"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "jta-transaction-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.JtaTransactionErrorHandlerDefinition"
          },
          "no-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.NoErrorHandlerDefinition"
          },
          "spring-transaction-error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.errorhandler.SpringTransactionErrorHandlerDefinition"
          }
        }
      },
      "org.apache.camel.model.ExpressionSubElementDefinition" : {
        "type" : "object",
        "properties" : {
          "constant" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ConstantExpression"
          },
          "csimple" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.CSimpleExpression"
          },
          "datasonnet" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.DatasonnetExpression"
          },
          "exchange-property" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExchangePropertyExpression"
          },
          "exchangeProperty" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExchangePropertyExpression"
          },
          "groovy" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.GroovyExpression"
          },
          "header" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.HeaderExpression"
          },
          "hl7terser" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.Hl7TerserExpression"
          },
          "joor" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JoorExpression"
          },
          "jq" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JqExpression"
          },
          "js" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JavaScriptExpression"
          },
          "jsonpath" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JsonPathExpression"
          },
          "language" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.LanguageExpression"
          },
          "method" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.MethodCallExpression"
          },
          "mvel" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.MvelExpression"
          },
          "ognl" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.OgnlExpression"
          },
          "python" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.PythonExpression"
          },
          "ref" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.RefExpression"
          },
          "simple" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.SimpleExpression"
          },
          "spel" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.SpELExpression"
          },
          "tokenize" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.TokenizerExpression"
          },
          "xpath" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.XPathExpression"
          },
          "xquery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.XQueryExpression"
          },
          "xtokenize" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.XMLTokenizerExpression"
          }
        }
      },
      "org.apache.camel.model.FaultToleranceConfigurationDefinition" : {
        "title" : "Fault Tolerance Configuration",
        "description" : "MicroProfile Fault Tolerance Circuit Breaker EIP configuration",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "bulkhead-enabled" : {
            "type" : "boolean",
            "description" : "Whether bulkhead is enabled or not on the circuit breaker. Default is false.",
            "title" : "Bulkhead Enabled"
          },
          "bulkhead-executor-service" : {
            "type" : "string",
            "description" : "References to a custom thread pool to use when bulkhead is enabled.",
            "title" : "Bulkhead Executor Service"
          },
          "bulkhead-max-concurrent-calls" : {
            "type" : "number",
            "description" : "Configures the max amount of concurrent calls the bulkhead will support.",
            "title" : "Bulkhead Max Concurrent Calls",
            "default" : "10"
          },
          "bulkhead-waiting-task-queue" : {
            "type" : "number",
            "description" : "Configures the task queue size for holding waiting tasks to be processed by the bulkhead.",
            "title" : "Bulkhead Waiting Task Queue",
            "default" : "10"
          },
          "circuit-breaker" : {
            "type" : "string",
            "description" : "Refers to an existing io.smallrye.faulttolerance.core.circuit.breaker.CircuitBreaker instance to lookup and use from the registry. When using this, then any other circuit breaker options are not in use.",
            "title" : "Circuit Breaker"
          },
          "delay" : {
            "type" : "string",
            "description" : "Control how long the circuit breaker stays open. The default is 5 seconds.",
            "title" : "Delay",
            "default" : "5000"
          },
          "failure-ratio" : {
            "type" : "number",
            "description" : "Configures the failure rate threshold in percentage. If the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 50 percentage.",
            "title" : "Failure Ratio",
            "default" : "50"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "request-volume-threshold" : {
            "type" : "number",
            "description" : "Controls the size of the rolling window used when the circuit breaker is closed",
            "title" : "Request Volume Threshold",
            "default" : "20"
          },
          "success-threshold" : {
            "type" : "number",
            "description" : "Controls the number of trial calls which are allowed when the circuit breaker is half-open",
            "title" : "Success Threshold",
            "default" : "1"
          },
          "timeout-duration" : {
            "type" : "string",
            "description" : "Configures the thread execution timeout. Default value is 1 second.",
            "title" : "Timeout Duration",
            "default" : "1000"
          },
          "timeout-enabled" : {
            "type" : "boolean",
            "description" : "Whether timeout is enabled or not on the circuit breaker. Default is false.",
            "title" : "Timeout Enabled"
          },
          "timeout-pool-size" : {
            "type" : "number",
            "description" : "Configures the pool size of the thread pool when timeout is enabled. Default value is 10.",
            "title" : "Timeout Pool Size",
            "default" : "10"
          },
          "timeout-scheduled-executor-service" : {
            "type" : "string",
            "description" : "References to a custom thread pool to use when timeout is enabled",
            "title" : "Timeout Scheduled Executor Service"
          }
        }
      },
      "org.apache.camel.model.FilterDefinition" : {
        "title" : "Filter",
        "description" : "Filter out messages based using a predicate",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to determine if the message should be filtered or not. If the expression returns an empty value or false then the message is filtered (dropped), otherwise the message is continued being routed.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "status-property-name" : {
            "type" : "string",
            "description" : "Name of exchange property to use for storing the status of the filtering. Setting this allows to know if the filter predicate evaluated as true or false.",
            "title" : "Status Property Name"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.FinallyDefinition" : {
        "title" : "Do Finally",
        "description" : "Path traversed when a try, catch, finally block exits",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.FromDefinition" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "uri" : {
            "type" : "string"
          }
        },
        "required" : [ "steps", "uri" ]
      },
      "org.apache.camel.model.GlobalOptionDefinition" : {
        "title" : "Global Option",
        "description" : "Models a string key/value pair for configuring some global options on a Camel context such as max debug log length.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Global option key",
            "title" : "Key"
          },
          "value" : {
            "type" : "string",
            "description" : "Global option value",
            "title" : "Value"
          }
        },
        "required" : [ "key", "value" ]
      },
      "org.apache.camel.model.GlobalOptionsDefinition" : {
        "title" : "Global Options",
        "description" : "Models a series of string key/value pairs for configuring some global options on a Camel context such as max debug log length.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "global-option" : {
            "type" : "array",
            "description" : "A series of global options as key value pairs",
            "title" : "Global Option",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.GlobalOptionDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.IdempotentConsumerDefinition" : {
        "title" : "Idempotent Consumer",
        "description" : "Filters out duplicate messages",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "completion-eager" : {
            "type" : "boolean",
            "description" : "Sets whether to complete the idempotent consumer eager or when the exchange is done. If this option is true to complete eager, then the idempotent consumer will trigger its completion when the exchange reached the end of the block of the idempotent consumer pattern. So if the exchange is continued routed after the block ends, then whatever happens there does not affect the state. If this option is false (default) to not complete eager, then the idempotent consumer will complete when the exchange is done being routed. So if the exchange is continued routed after the block ends, then whatever happens there also affect the state. For example if the exchange failed due to an exception, then the state of the idempotent consumer will be a rollback.",
            "title" : "Completion Eager"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "eager" : {
            "type" : "boolean",
            "description" : "Sets whether to eagerly add the key to the idempotent repository or wait until the exchange is complete. Eager is default enabled.",
            "title" : "Eager"
          },
          "expression" : {
            "description" : "Expression used to calculate the correlation key to use for duplicate check. The Exchange which has the same correlation key is regarded as a duplicate and will be rejected.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "idempotent-repository" : {
            "type" : "string",
            "description" : "Sets the reference name of the message id repository",
            "title" : "Idempotent Repository"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "remove-on-failure" : {
            "type" : "boolean",
            "description" : "Sets whether to remove or keep the key on failure. The default behavior is to remove the key on failure.",
            "title" : "Remove On Failure"
          },
          "skip-duplicate" : {
            "type" : "boolean",
            "description" : "Sets whether to skip duplicates or not. The default behavior is to skip duplicates. A duplicate message would have the Exchange property org.apache.camel.Exchange#DUPLICATE_MESSAGE set to a Boolean#TRUE value. A none duplicate message will not have this property set.",
            "title" : "Skip Duplicate"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        },
        "required" : [ "idempotent-repository" ]
      },
      "org.apache.camel.model.InputTypeDefinition" : {
        "title" : "Input Type",
        "description" : "Set the expected data type of the input message. If the actual message type is different at runtime, camel look for a required Transformer and apply if exists. If validate attribute is true then camel applies Validator as well. Type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} . It's also possible to specify only scheme part, so that it works like a wildcard. If only 'xml' is specified, all the XML message matches. It's handy to add only one transformer/validator for all the transformation from/to XML.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "urn" : {
            "type" : "string",
            "description" : "The input type URN.",
            "title" : "Urn"
          },
          "validate" : {
            "type" : "boolean",
            "description" : "Whether if validation is required for this input type.",
            "title" : "Validate"
          }
        },
        "required" : [ "urn" ]
      },
      "org.apache.camel.model.InterceptDefinition" : {
        "title" : "Intercept",
        "description" : "Intercepts a message at each step in the route",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.InterceptFromDefinition" : {
        "title" : "Intercept From",
        "description" : "Intercepts incoming messages",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
              }
            },
            "uri" : {
              "type" : "string",
              "description" : "Intercept incoming messages from the uri or uri pattern. If this option is not configured, then all incoming messages is intercepted.",
              "title" : "Uri"
            }
          }
        } ]
      },
      "org.apache.camel.model.InterceptSendToEndpointDefinition" : {
        "title" : "Intercept Send To Endpoint",
        "description" : "Intercepts messages being sent to an endpoint",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "after-uri" : {
              "type" : "string",
              "description" : "After sending to the endpoint then send the message to this uri which allows to process its result.",
              "title" : "After Uri"
            },
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "skip-send-to-original-endpoint" : {
              "type" : "string",
              "description" : "If set to true then the message is not sent to the original endpoint. By default (false) the message is both intercepted and then sent to the original endpoint.",
              "title" : "Skip Send To Original Endpoint"
            },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
              }
            },
            "uri" : {
              "type" : "string",
              "description" : "Intercept sending to the uri or uri pattern.",
              "title" : "Uri"
            }
          }
        } ],
        "required" : [ "uri" ]
      },
      "org.apache.camel.model.KameletDefinition" : {
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "name" : {
              "type" : "string"
            },
            "parameters" : {
              "type" : "object"
            },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
              }
            }
          }
        } ],
        "required" : [ "name" ]
      },
      "org.apache.camel.model.LoadBalanceDefinition" : {
        "title" : "Load Balance",
        "description" : "Balances message processing among a number of nodes",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "custom-load-balancer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.loadbalancer.CustomLoadBalancerDefinition"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "failover" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.loadbalancer.FailoverLoadBalancerDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean",
            "description" : "Sets whether or not to inherit the configured error handler. The default value is true. You can use this to disable using the inherited error handler for a given DSL such as a load balancer where you want to use a custom error handler strategy.",
            "title" : "Inherit Error Handler"
          },
          "random" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.loadbalancer.RandomLoadBalancerDefinition"
          },
          "round-robin" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.loadbalancer.RoundRobinLoadBalancerDefinition"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "sticky" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.loadbalancer.StickyLoadBalancerDefinition"
          },
          "topic" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.loadbalancer.TopicLoadBalancerDefinition"
          },
          "weighted" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.loadbalancer.WeightedLoadBalancerDefinition"
          }
        }
      },
      "org.apache.camel.model.LogDefinition" : {
        "title" : "Log",
        "description" : "Logs the defined message to the logger",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "log-name" : {
              "type" : "string",
              "description" : "Sets the name of the logger",
              "title" : "Log Name"
            },
            "logger" : {
              "type" : "string",
              "description" : "To refer to a custom logger instance to lookup from the registry.",
              "title" : "Logger"
            },
            "logging-level" : {
              "type" : "string",
              "description" : "Sets the logging level. The default value is INFO",
              "title" : "Logging Level",
              "default" : "INFO",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
            },
            "marker" : {
              "type" : "string",
              "description" : "To use slf4j marker",
              "title" : "Marker"
            },
            "message" : {
              "type" : "string",
              "description" : "Sets the log message (uses simple language)",
              "title" : "Message"
            }
          }
        } ],
        "required" : [ "message" ]
      },
      "org.apache.camel.model.LoopDefinition" : {
        "title" : "Loop",
        "description" : "Processes a message multiple times",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "break-on-shutdown" : {
            "type" : "boolean",
            "description" : "If the breakOnShutdown attribute is true, then the loop will not iterate until it reaches the end when Camel is shut down.",
            "title" : "Break On Shutdown"
          },
          "copy" : {
            "type" : "boolean",
            "description" : "If the copy attribute is true, a copy of the input Exchange is used for each iteration. That means each iteration will start from a copy of the same message. By default loop will loop the same exchange all over, so each iteration may have different message content.",
            "title" : "Copy"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "do-while" : {
            "type" : "boolean",
            "description" : "Enables the while loop that loops until the predicate evaluates to false or null.",
            "title" : "Do While"
          },
          "expression" : {
            "description" : "Expression to define how many times we should loop. Notice the expression is only evaluated once, and should return a number as how many times to loop. A value of zero or negative means no looping. The loop is like a for-loop fashion, if you want a while loop, then the dynamic router may be a better choice.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.MarshalDefinition" : {
        "title" : "Marshal",
        "description" : "Marshals data into a specified format for transmission over a transport or component",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "asn1" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ASN1DataFormat"
          },
          "avro" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.AvroDataFormat"
          },
          "barcode" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BarcodeDataFormat"
          },
          "base64" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.Base64DataFormat"
          },
          "bindy" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BindyDataFormat"
          },
          "cbor" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CBORDataFormat"
          },
          "crypto" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CryptoDataFormat"
          },
          "csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CsvDataFormat"
          },
          "custom" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CustomDataFormat"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "fhir-json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirJsonDataFormat"
          },
          "fhir-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirXmlDataFormat"
          },
          "flatpack" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FlatpackDataFormat"
          },
          "grok" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GrokDataFormat"
          },
          "gzip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GzipDeflaterDataFormat"
          },
          "hl7" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.HL7DataFormat"
          },
          "ical" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.IcalDataFormat"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "jackson-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JacksonXMLDataFormat"
          },
          "jaxb" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JaxbDataFormat"
          },
          "json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonDataFormat"
          },
          "json-api" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonApiDataFormat"
          },
          "lzf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.LZFDataFormat"
          },
          "mime-multipart" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.MimeMultipartDataFormat"
          },
          "parquet-avro" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ParquetAvroDataFormat"
          },
          "pgp" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.PGPDataFormat"
          },
          "protobuf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ProtobufDataFormat"
          },
          "rss" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.RssDataFormat"
          },
          "soap" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SoapDataFormat"
          },
          "swift-mt" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMtDataFormat"
          },
          "swift-mx" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMxDataFormat"
          },
          "syslog" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SyslogDataFormat"
          },
          "tar-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TarFileDataFormat"
          },
          "thrift" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ThriftDataFormat"
          },
          "tidy-markup" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TidyMarkupDataFormat"
          },
          "univocity-csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityCsvDataFormat"
          },
          "univocity-fixed" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityFixedDataFormat"
          },
          "univocity-tsv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityTsvDataFormat"
          },
          "xml-security" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.XMLSecurityDataFormat"
          },
          "yaml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.YAMLDataFormat"
          },
          "zip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipDeflaterDataFormat"
          },
          "zip-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipFileDataFormat"
          }
        }
      },
      "org.apache.camel.model.MulticastDefinition" : {
        "title" : "Multicast",
        "description" : "Routes the same message to multiple paths either sequentially or in parallel.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "aggregation-strategy" : {
            "type" : "string",
            "description" : "Refers to an AggregationStrategy to be used to assemble the replies from the multicasts, into a single outgoing message from the Multicast. By default Camel will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy",
            "title" : "Aggregation Strategy"
          },
          "aggregation-strategy-method-allow-null" : {
            "type" : "boolean",
            "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy",
            "title" : "Aggregation Strategy Method Allow Null"
          },
          "aggregation-strategy-method-name" : {
            "type" : "string",
            "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Name"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "Refers to a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.",
            "title" : "Executor Service"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "on-prepare" : {
            "type" : "string",
            "description" : "Uses the Processor when preparing the org.apache.camel.Exchange to be send. This can be used to deep-clone messages that should be send, or any custom logic needed before the exchange is send.",
            "title" : "On Prepare"
          },
          "parallel-aggregate" : {
            "type" : "boolean",
            "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Camel synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe.",
            "title" : "Parallel Aggregate"
          },
          "parallel-processing" : {
            "type" : "boolean",
            "description" : "If enabled then sending messages to the multicasts occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. Its only the sending and processing the replies from the multicasts which happens concurrently. When parallel processing is enabled, then the Camel routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the multicast, then make sure to enable the synchronous option as well.",
            "title" : "Parallel Processing"
          },
          "share-unit-of-work" : {
            "type" : "boolean",
            "description" : "Shares the org.apache.camel.spi.UnitOfWork with the parent and each of the sub messages. Multicast will by default not share unit of work between the parent exchange and each multicasted exchange. This means each sub exchange has its own individual unit of work.",
            "title" : "Share Unit Of Work"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "stop-on-exception" : {
            "type" : "boolean",
            "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.apache.camel.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the multicast will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end",
            "title" : "Stop On Exception"
          },
          "streaming" : {
            "type" : "boolean",
            "description" : "If enabled then Camel will process replies out-of-order, eg in the order they come back. If disabled, Camel will process replies in the same order as defined by the multicast.",
            "title" : "Streaming"
          },
          "synchronous" : {
            "type" : "boolean",
            "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the multicast is complete, even if parallel processing is enabled.",
            "title" : "Synchronous"
          },
          "timeout" : {
            "type" : "string",
            "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Multicast hasn't been able to send and process all replies within the given timeframe, then the timeout triggers and the Multicast breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Camel to shut down in a graceful manner may continue to run. So use this option with a bit of care.",
            "title" : "Timeout",
            "default" : "0"
          }
        }
      },
      "org.apache.camel.model.OnCompletionDefinition" : {
        "title" : "On Completion",
        "description" : "Route to be executed when normal route processing completes",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.",
            "title" : "Executor Service"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "mode" : {
            "type" : "string",
            "description" : "Sets the on completion mode. The default value is AfterConsumer",
            "title" : "Mode",
            "default" : "AfterConsumer",
            "enum" : [ "AfterConsumer", "BeforeConsumer" ]
          },
          "on-complete-only" : {
            "type" : "boolean",
            "description" : "Will only synchronize when the org.apache.camel.Exchange completed successfully (no errors).",
            "title" : "On Complete Only"
          },
          "on-failure-only" : {
            "type" : "boolean",
            "description" : "Will only synchronize when the org.apache.camel.Exchange ended with failure (exception or FAULT message).",
            "title" : "On Failure Only"
          },
          "on-when" : {
            "description" : "Sets an additional predicate that should be true before the onCompletion is triggered. To be used for fine grained controlling whether a completion callback should be invoked or not",
            "title" : "On When",
            "$ref" : "#/items/definitions/org.apache.camel.model.WhenDefinition"
          },
          "parallel-processing" : {
            "type" : "boolean",
            "description" : "If enabled then the on completion process will run asynchronously by a separate thread from a thread pool. By default this is false, meaning the on completion process will run synchronously using the same caller thread as from the route.",
            "title" : "Parallel Processing"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "use-original-message" : {
            "type" : "boolean",
            "description" : "Will use the original input message body when an org.apache.camel.Exchange for this on completion. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Message"
          }
        }
      },
      "org.apache.camel.model.OnExceptionDefinition" : {
        "title" : "On Exception",
        "description" : "Route to be executed when an exception is thrown",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "continued" : {
            "description" : "Sets whether the exchange should handle and continue routing from the point of failure. If this option is enabled then its considered handled as well.",
            "title" : "Continued",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "exception" : {
            "type" : "array",
            "description" : "A set of exceptions to react upon.",
            "title" : "Exception",
            "items" : {
              "type" : "string"
            }
          },
          "handled" : {
            "description" : "Sets whether the exchange should be marked as handled or not.",
            "title" : "Handled",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "on-exception-occurred-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
            "title" : "On Exception Occurred Ref"
          },
          "on-redelivery-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.apache.camel.Exchange before its being redelivered.",
            "title" : "On Redelivery Ref"
          },
          "on-when" : {
            "description" : "Sets an additional predicate that should be true before the onException is triggered. To be used for fine grained controlling whether a thrown exception should be intercepted by this exception type or not.",
            "title" : "On When",
            "$ref" : "#/items/definitions/org.apache.camel.model.WhenDefinition"
          },
          "redelivery-policy" : {
            "description" : "Used for configuring redelivery options",
            "title" : "Redelivery Policy",
            "$ref" : "#/items/definitions/org.apache.camel.model.RedeliveryPolicyDefinition"
          },
          "redelivery-policy-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a redelivery policy to lookup in the org.apache.camel.spi.Registry to be used.",
            "title" : "Redelivery Policy Ref"
          },
          "retry-while" : {
            "description" : "Sets the retry while predicate. Will continue retrying until predicate returns false.",
            "title" : "Retry While",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "use-original-body" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message body (original body only) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Body"
          },
          "use-original-message" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message (original body and headers) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Message"
          }
        }
      },
      "org.apache.camel.model.OnFallbackDefinition" : {
        "title" : "On Fallback",
        "description" : "Route to be executed when Circuit Breaker EIP executes fallback",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "fallback-via-network" : {
            "type" : "boolean",
            "description" : "Whether the fallback goes over the network. If the fallback will go over the network it is another possible point of failure. It is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool this would prevent the fallback from running if the two commands share the same pool.",
            "title" : "Fallback Via Network"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.OptimisticLockRetryPolicyDefinition" : {
        "title" : "Optimistic Lock Retry Policy",
        "description" : "To configure optimistic locking",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "exponential-back-off" : {
            "type" : "boolean",
            "description" : "Enable exponential backoff",
            "title" : "Exponential Back Off"
          },
          "maximum-retries" : {
            "type" : "number",
            "description" : "Sets the maximum number of retries",
            "title" : "Maximum Retries"
          },
          "maximum-retry-delay" : {
            "type" : "string",
            "description" : "Sets the upper value of retry in millis between retries, when using exponential or random backoff",
            "title" : "Maximum Retry Delay",
            "default" : "1000"
          },
          "random-back-off" : {
            "type" : "boolean",
            "description" : "Enables random backoff",
            "title" : "Random Back Off"
          },
          "retry-delay" : {
            "type" : "string",
            "description" : "Sets the delay in millis between retries",
            "title" : "Retry Delay",
            "default" : "50"
          }
        }
      },
      "org.apache.camel.model.OtherwiseDefinition" : {
        "title" : "Otherwise",
        "description" : "Route to be executed when all other choices evaluate to false",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.OutputDefinition" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.OutputTypeDefinition" : {
        "title" : "Output Type",
        "description" : "Set the expected data type of the output message. If the actual message type is different at runtime, camel look for a required Transformer and apply if exists. If validate attribute is true then camel applies Validator as well. Type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} . It's also possible to specify only scheme part, so that it works like a wildcard. If only 'xml' is specified, all the XML message matches. It's handy to add only one transformer/validator for all the XML-Java transformation.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "urn" : {
            "type" : "string",
            "description" : "Set output type URN.",
            "title" : "Urn"
          },
          "validate" : {
            "type" : "boolean",
            "description" : "Whether if validation is required for this output type.",
            "title" : "Validate"
          }
        },
        "required" : [ "urn" ]
      },
      "org.apache.camel.model.PackageScanDefinition" : {
        "title" : "Package Scan",
        "description" : "Scans for Java org.apache.camel.builder.RouteBuilder classes in java packages",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "excludes" : {
            "type" : "array",
            "description" : "Exclude finding route builder from these java package names.",
            "title" : "Excludes",
            "items" : {
              "type" : "string"
            }
          },
          "includes" : {
            "type" : "array",
            "description" : "Include finding route builder from these java package names.",
            "title" : "Includes",
            "items" : {
              "type" : "string"
            }
          },
          "package" : {
            "type" : "array",
            "description" : "Sets the java package names to use for scanning for route builder classes",
            "title" : "Package",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "org.apache.camel.model.PausableDefinition" : {
        "title" : "Pausable",
        "description" : "Pausable EIP to support resuming processing from last known offset.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "consumer-listener" : {
            "type" : "string",
            "description" : "Sets the consumer listener to use",
            "title" : "Consumer Listener"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "until-check" : {
            "type" : "string",
            "description" : "References to a java.util.function.Predicate to use for until checks. The predicate is responsible for evaluating whether the processing can resume or not. Such predicate should return true if the consumption can resume, or false otherwise. The exact point of when the predicate is called is dependent on the component, and it may be called on either one of the available events. Implementations should not assume the predicate to be called at any specific point.",
            "title" : "Until Check"
          }
        },
        "required" : [ "consumer-listener", "until-check" ]
      },
      "org.apache.camel.model.PipelineDefinition" : {
        "title" : "Pipeline",
        "description" : "Routes the message to a sequence of processors.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.PolicyDefinition" : {
        "title" : "Policy",
        "description" : "Defines a policy the route will use",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "ref" : {
            "type" : "string",
            "description" : "Sets a reference to use for lookup the policy in the registry.",
            "title" : "Ref"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        },
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.PollEnrichDefinition" : {
        "title" : "Poll Enrich",
        "description" : "Enriches messages with data polled from a secondary resource",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "aggregate-on-exception" : {
            "type" : "boolean",
            "description" : "If this option is false then the aggregate method is not used if there was an exception thrown while trying to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what to do if there was an exception in the aggregate method. For example to suppress the exception or set a custom message body etc.",
            "title" : "Aggregate On Exception"
          },
          "aggregation-strategy" : {
            "type" : "string",
            "description" : "Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message. By default Camel will use the reply from the external service as outgoing message.",
            "title" : "Aggregation Strategy"
          },
          "aggregation-strategy-method-allow-null" : {
            "type" : "string",
            "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Allow Null"
          },
          "aggregation-strategy-method-name" : {
            "type" : "string",
            "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Name"
          },
          "cache-size" : {
            "type" : "number",
            "description" : "Sets the maximum size used by the org.apache.camel.spi.ConsumerCache which is used to cache and reuse consumers when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
            "title" : "Cache Size"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression that computes the endpoint uri to use as the resource endpoint to enrich from",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "ignore-invalid-endpoint" : {
            "type" : "boolean",
            "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
            "title" : "Ignore Invalid Endpoint"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "timeout" : {
            "type" : "string",
            "description" : "Timeout in millis when polling from the external service. The timeout has influence about the poll enrich behavior. It basically operations in three different modes: negative value - Waits until a message is available and then returns it. Warning that this method could block indefinitely if no messages are available. 0 - Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet. positive value - Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available. Returns null if timed out The default value is -1 and therefore the method could block indefinitely, and therefore its recommended to use a timeout value",
            "title" : "Timeout",
            "default" : "-1"
          }
        }
      },
      "org.apache.camel.model.ProcessDefinition" : {
        "title" : "Process",
        "description" : "Calls a Camel processor",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "ref" : {
            "type" : "string",
            "description" : "Reference to the Processor to lookup in the registry to use. Can also be used for creating new beans by their class name by prefixing with #class, eg #class:com.foo.MyClassType. And it is also possible to refer to singleton beans by their type in the registry by prefixing with #type: syntax, eg #type:com.foo.MyClassType",
            "title" : "Ref"
          }
        },
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.PropertyDefinition" : {
        "title" : "Property",
        "description" : "A key value pair where the value is a literal value",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Property key",
            "title" : "Key"
          },
          "value" : {
            "type" : "string",
            "description" : "Property value",
            "title" : "Value"
          }
        },
        "required" : [ "key", "value" ]
      },
      "org.apache.camel.model.PropertyExpressionDefinition" : {
        "title" : "Property Expression",
        "description" : "A key value pair where the value is an expression.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "expression" : {
            "description" : "Property values as an expression",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "key" : {
            "type" : "string",
            "description" : "Property key",
            "title" : "Key"
          }
        },
        "required" : [ "key" ]
      },
      "org.apache.camel.model.RecipientListDefinition" : {
        "title" : "Recipient List",
        "description" : "Route messages to a number of dynamically specified recipients",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "aggregation-strategy" : {
            "type" : "string",
            "description" : "Sets the AggregationStrategy to be used to assemble the replies from the recipients, into a single outgoing message from the RecipientList. By default Camel will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy",
            "title" : "Aggregation Strategy"
          },
          "aggregation-strategy-method-allow-null" : {
            "type" : "boolean",
            "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy",
            "title" : "Aggregation Strategy Method Allow Null"
          },
          "aggregation-strategy-method-name" : {
            "type" : "string",
            "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Name"
          },
          "cache-size" : {
            "type" : "number",
            "description" : "Sets the maximum size used by the org.apache.camel.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
            "title" : "Cache Size"
          },
          "delimiter" : {
            "type" : "string",
            "description" : "Delimiter used if the Expression returned multiple endpoints. Can be turned off using the value false. The default value is ,",
            "title" : "Delimiter",
            "default" : ","
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.",
            "title" : "Executor Service"
          },
          "expression" : {
            "description" : "Expression that returns which endpoints (url) to send the message to (the recipients). If the expression return an empty value then the message is not sent to any recipients.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "ignore-invalid-endpoints" : {
            "type" : "boolean",
            "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
            "title" : "Ignore Invalid Endpoints"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "on-prepare" : {
            "type" : "string",
            "description" : "Uses the Processor when preparing the org.apache.camel.Exchange to be used send. This can be used to deep-clone messages that should be send, or any custom logic needed before the exchange is send.",
            "title" : "On Prepare"
          },
          "parallel-aggregate" : {
            "type" : "boolean",
            "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Camel synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe.",
            "title" : "Parallel Aggregate"
          },
          "parallel-processing" : {
            "type" : "boolean",
            "description" : "If enabled then sending messages to the recipients occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. Its only the sending and processing the replies from the recipients which happens concurrently. When parallel processing is enabled, then the Camel routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the recipient list, then make sure to enable the synchronous option as well.",
            "title" : "Parallel Processing"
          },
          "share-unit-of-work" : {
            "type" : "boolean",
            "description" : "Shares the org.apache.camel.spi.UnitOfWork with the parent and each of the sub messages. Recipient List will by default not share unit of work between the parent exchange and each recipient exchange. This means each sub exchange has its own individual unit of work.",
            "title" : "Share Unit Of Work"
          },
          "stop-on-exception" : {
            "type" : "boolean",
            "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.apache.camel.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the recipient list will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end",
            "title" : "Stop On Exception"
          },
          "streaming" : {
            "type" : "boolean",
            "description" : "If enabled then Camel will process replies out-of-order, eg in the order they come back. If disabled, Camel will process replies in the same order as defined by the recipient list.",
            "title" : "Streaming"
          },
          "synchronous" : {
            "type" : "boolean",
            "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the recipient list is complete, even if parallel processing is enabled.",
            "title" : "Synchronous"
          },
          "timeout" : {
            "type" : "string",
            "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Recipient List hasn't been able to send and process all replies within the given timeframe, then the timeout triggers and the Recipient List breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Camel to shut down in a graceful manner may continue to run. So use this option with a bit of care.",
            "title" : "Timeout",
            "default" : "0"
          }
        }
      },
      "org.apache.camel.model.RedeliveryPolicyDefinition" : {
        "title" : "Redelivery Policy",
        "description" : "To configure re-delivery for error handling",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-redelivery-while-stopping" : {
            "type" : "boolean",
            "description" : "Controls whether to allow redelivery while stopping/shutting down a route that uses error handling.",
            "title" : "Allow Redelivery While Stopping"
          },
          "async-delayed-redelivery" : {
            "type" : "boolean",
            "description" : "Allow asynchronous delayed redelivery. The route, in particular the consumer's component, must support the Asynchronous Routing Engine (e.g. seda).",
            "title" : "Async Delayed Redelivery"
          },
          "back-off-multiplier" : {
            "type" : "number",
            "description" : "Sets the back off multiplier",
            "title" : "Back Off Multiplier",
            "default" : "2.0"
          },
          "collision-avoidance-factor" : {
            "type" : "number",
            "description" : "Sets the collision avoidance factor",
            "title" : "Collision Avoidance Factor",
            "default" : "0.15"
          },
          "delay-pattern" : {
            "type" : "string",
            "description" : "Sets the delay pattern with delay intervals.",
            "title" : "Delay Pattern"
          },
          "disable-redelivery" : {
            "type" : "boolean",
            "description" : "Disables redelivery (same as setting maximum redeliveries to 0)",
            "title" : "Disable Redelivery"
          },
          "exchange-formatter-ref" : {
            "type" : "string",
            "description" : "Sets the reference of the instance of org.apache.camel.spi.ExchangeFormatter to generate the log message from exchange.",
            "title" : "Exchange Formatter Ref"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "log-continued" : {
            "type" : "boolean",
            "description" : "Sets whether continued exceptions should be logged or not. Can be used to include or reduce verbose.",
            "title" : "Log Continued"
          },
          "log-exhausted" : {
            "type" : "boolean",
            "description" : "Sets whether exhausted exceptions should be logged or not. Can be used to include or reduce verbose.",
            "title" : "Log Exhausted"
          },
          "log-exhausted-message-body" : {
            "type" : "boolean",
            "description" : "Sets whether exhausted message body should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose. Requires logExhaustedMessageHistory to be enabled.",
            "title" : "Log Exhausted Message Body"
          },
          "log-exhausted-message-history" : {
            "type" : "boolean",
            "description" : "Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose.",
            "title" : "Log Exhausted Message History"
          },
          "log-handled" : {
            "type" : "boolean",
            "description" : "Sets whether handled exceptions should be logged or not. Can be used to include or reduce verbose.",
            "title" : "Log Handled"
          },
          "log-new-exception" : {
            "type" : "boolean",
            "description" : "Sets whether new exceptions should be logged or not. Can be used to include or reduce verbose. A new exception is an exception that was thrown while handling a previous exception.",
            "title" : "Log New Exception"
          },
          "log-retry-attempted" : {
            "type" : "boolean",
            "description" : "Sets whether retry attempts should be logged or not. Can be used to include or reduce verbose.",
            "title" : "Log Retry Attempted"
          },
          "log-retry-stack-trace" : {
            "type" : "boolean",
            "description" : "Sets whether stack traces should be logged when an retry attempt failed. Can be used to include or reduce verbose.",
            "title" : "Log Retry Stack Trace"
          },
          "log-stack-trace" : {
            "type" : "boolean",
            "description" : "Sets whether stack traces should be logged. Can be used to include or reduce verbose.",
            "title" : "Log Stack Trace"
          },
          "maximum-redeliveries" : {
            "type" : "number",
            "description" : "Sets the maximum redeliveries x = redeliver at most x times 0 = no redeliveries -1 = redeliver forever",
            "title" : "Maximum Redeliveries"
          },
          "maximum-redelivery-delay" : {
            "type" : "string",
            "description" : "Sets the maximum delay between redelivery",
            "title" : "Maximum Redelivery Delay",
            "default" : "60000"
          },
          "redelivery-delay" : {
            "type" : "string",
            "description" : "Sets the initial redelivery delay",
            "title" : "Redelivery Delay",
            "default" : "1000"
          },
          "retries-exhausted-log-level" : {
            "type" : "string",
            "description" : "Sets the logging level to use when retries have been exhausted",
            "title" : "Retries Exhausted Log Level",
            "default" : "ERROR"
          },
          "retry-attempted-log-interval" : {
            "type" : "number",
            "description" : "Sets the interval to use for logging retry attempts",
            "title" : "Retry Attempted Log Interval",
            "default" : "1"
          },
          "retry-attempted-log-level" : {
            "type" : "string",
            "description" : "Sets the logging level to use for logging retry attempts",
            "title" : "Retry Attempted Log Level",
            "default" : "DEBUG"
          },
          "use-collision-avoidance" : {
            "type" : "boolean",
            "description" : "Turn on collision avoidance.",
            "title" : "Use Collision Avoidance"
          },
          "use-exponential-back-off" : {
            "type" : "boolean",
            "description" : "Turn on exponential backk off",
            "title" : "Use Exponential Back Off"
          }
        }
      },
      "org.apache.camel.model.RemoveHeaderDefinition" : {
        "title" : "Remove Header",
        "description" : "Removes a named header from the message",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "name" : {
              "type" : "string",
              "description" : "Name of header to remove",
              "title" : "Name"
            }
          }
        } ],
        "required" : [ "name" ]
      },
      "org.apache.camel.model.RemoveHeadersDefinition" : {
        "title" : "Remove Headers",
        "description" : "Removes message headers whose name matches a specified pattern",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "exclude-pattern" : {
              "type" : "string",
              "description" : "Name or patter of headers to not remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
              "title" : "Exclude Pattern"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "pattern" : {
              "type" : "string",
              "description" : "Name or pattern of headers to remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
              "title" : "Pattern"
            }
          }
        } ],
        "required" : [ "pattern" ]
      },
      "org.apache.camel.model.RemovePropertiesDefinition" : {
        "title" : "Remove Properties",
        "description" : "Removes message exchange properties whose name matches a specified pattern",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "exclude-pattern" : {
              "type" : "string",
              "description" : "Name or pattern of properties to not remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
              "title" : "Exclude Pattern"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "pattern" : {
              "type" : "string",
              "description" : "Name or pattern of properties to remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
              "title" : "Pattern"
            }
          }
        } ],
        "required" : [ "pattern" ]
      },
      "org.apache.camel.model.RemovePropertyDefinition" : {
        "title" : "Remove Property",
        "description" : "Removes a named property from the message exchange",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "name" : {
              "type" : "string",
              "description" : "Name of property to remove.",
              "title" : "Name"
            }
          }
        } ],
        "required" : [ "name" ]
      },
      "org.apache.camel.model.ResequenceDefinition" : {
        "title" : "Resequence",
        "description" : "Resequences (re-order) messages based on an expression",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "batch-config" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.config.BatchResequencerConfig"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to use for re-ordering the messages, such as a header with a sequence number",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "stream-config" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.config.StreamResequencerConfig"
          }
        }
      },
      "org.apache.camel.model.Resilience4jConfigurationDefinition" : {
        "title" : "Resilience4j Configuration",
        "description" : "Resilience4j Circuit Breaker EIP configuration",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "automatic-transition-from-open-to-half-open-enabled" : {
            "type" : "boolean",
            "description" : "Enables automatic transition from OPEN to HALF_OPEN state once the waitDurationInOpenState has passed.",
            "title" : "Automatic Transition From Open To Half Open Enabled"
          },
          "bulkhead-enabled" : {
            "type" : "boolean",
            "description" : "Whether bulkhead is enabled or not on the circuit breaker. Default is false.",
            "title" : "Bulkhead Enabled"
          },
          "bulkhead-max-concurrent-calls" : {
            "type" : "number",
            "description" : "Configures the max amount of concurrent calls the bulkhead will support.",
            "title" : "Bulkhead Max Concurrent Calls",
            "default" : "25"
          },
          "bulkhead-max-wait-duration" : {
            "type" : "number",
            "description" : "Configures a maximum amount of time which the calling thread will wait to enter the bulkhead. If bulkhead has space available, entry is guaranteed and immediate. If bulkhead is full, calling threads will contest for space, if it becomes available. maxWaitDuration can be set to 0. Note: for threads running on an event-loop or equivalent (rx computation pool, etc), setting maxWaitDuration to 0 is highly recommended. Blocking an event-loop thread will most likely have a negative effect on application throughput.",
            "title" : "Bulkhead Max Wait Duration",
            "default" : "0"
          },
          "circuit-breaker" : {
            "type" : "string",
            "description" : "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreaker instance to lookup and use from the registry. When using this, then any other circuit breaker options are not in use.",
            "title" : "Circuit Breaker"
          },
          "config" : {
            "type" : "string",
            "description" : "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreakerConfig instance to lookup and use from the registry.",
            "title" : "Config"
          },
          "failure-rate-threshold" : {
            "type" : "number",
            "description" : "Configures the failure rate threshold in percentage. If the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 50 percentage.",
            "title" : "Failure Rate Threshold",
            "default" : "50"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "minimum-number-of-calls" : {
            "type" : "number",
            "description" : "Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate. For example, if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be calculated. If only 9 calls have been recorded the CircuitBreaker will not transition to open even if all 9 calls have failed. Default minimumNumberOfCalls is 100",
            "title" : "Minimum Number Of Calls",
            "default" : "100"
          },
          "permitted-number-of-calls-in-half-open-state" : {
            "type" : "number",
            "description" : "Configures the number of permitted calls when the CircuitBreaker is half open. The size must be greater than 0. Default size is 10.",
            "title" : "Permitted Number Of Calls In Half Open State",
            "default" : "10"
          },
          "sliding-window-size" : {
            "type" : "number",
            "description" : "Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. slidingWindowSize configures the size of the sliding window. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. The slidingWindowSize must be greater than 0. The minimumNumberOfCalls must be greater than 0. If the slidingWindowType is COUNT_BASED, the minimumNumberOfCalls cannot be greater than slidingWindowSize . If the slidingWindowType is TIME_BASED, you can pick whatever you want. Default slidingWindowSize is 100.",
            "title" : "Sliding Window Size",
            "default" : "100"
          },
          "sliding-window-type" : {
            "type" : "string",
            "description" : "Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. Default slidingWindowType is COUNT_BASED.",
            "title" : "Sliding Window Type",
            "default" : "COUNT_BASED",
            "enum" : [ "TIME_BASED", "COUNT_BASED" ]
          },
          "slow-call-duration-threshold" : {
            "type" : "number",
            "description" : "Configures the duration threshold (seconds) above which calls are considered as slow and increase the slow calls percentage. Default value is 60 seconds.",
            "title" : "Slow Call Duration Threshold",
            "default" : "60"
          },
          "slow-call-rate-threshold" : {
            "type" : "number",
            "description" : "Configures a threshold in percentage. The CircuitBreaker considers a call as slow when the call duration is greater than slowCallDurationThreshold Duration. When the percentage of slow calls is equal or greater the threshold, the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 100 percentage which means that all recorded calls must be slower than slowCallDurationThreshold.",
            "title" : "Slow Call Rate Threshold",
            "default" : "100"
          },
          "throw-exception-when-half-open-or-open-state" : {
            "type" : "boolean",
            "description" : "Whether to throw io.github.resilience4j.circuitbreaker.CallNotPermittedException when the call is rejected due circuit breaker is half open or open.",
            "title" : "Throw Exception When Half Open Or Open State"
          },
          "timeout-cancel-running-future" : {
            "type" : "boolean",
            "description" : "Configures whether cancel is called on the running future. Defaults to true.",
            "title" : "Timeout Cancel Running Future"
          },
          "timeout-duration" : {
            "type" : "number",
            "description" : "Configures the thread execution timeout. Default value is 1 second.",
            "title" : "Timeout Duration",
            "default" : "1000"
          },
          "timeout-enabled" : {
            "type" : "boolean",
            "description" : "Whether timeout is enabled or not on the circuit breaker. Default is false.",
            "title" : "Timeout Enabled"
          },
          "timeout-executor-service" : {
            "type" : "string",
            "description" : "References to a custom thread pool to use when timeout is enabled (uses ForkJoinPool#commonPool() by default)",
            "title" : "Timeout Executor Service"
          },
          "wait-duration-in-open-state" : {
            "type" : "number",
            "description" : "Configures the wait duration (in seconds) which specifies how long the CircuitBreaker should stay open, before it switches to half open. Default value is 60 seconds.",
            "title" : "Wait Duration In Open State",
            "default" : "60"
          },
          "writable-stack-trace-enabled" : {
            "type" : "boolean",
            "description" : "Enables writable stack traces. When set to false, Exception.getStackTrace returns a zero length array. This may be used to reduce log spam when the circuit breaker is open as the cause of the exceptions is already known (the circuit breaker is short-circuiting calls).",
            "title" : "Writable Stack Trace Enabled"
          }
        }
      },
      "org.apache.camel.model.RestContextRefDefinition" : {
        "title" : "Rest Context Ref",
        "description" : "To refer to an XML file with rest services defined using the rest-dsl",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "ref" : {
              "type" : "string",
              "description" : "Reference to the rest-dsl",
              "title" : "Ref"
            }
          }
        } ],
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.ResumableDefinition" : {
        "title" : "Resumable",
        "description" : "Resume EIP to support resuming processing from last known offset.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "intermittent" : {
            "type" : "boolean",
            "description" : "Sets whether the offsets will be intermittently present or whether they must be present in every exchange",
            "title" : "Intermittent"
          },
          "logging-level" : {
            "type" : "string",
            "title" : "Logging Level",
            "default" : "ERROR",
            "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
          },
          "resume-strategy" : {
            "type" : "string",
            "description" : "Sets the resume strategy to use",
            "title" : "Resume Strategy"
          }
        },
        "required" : [ "resume-strategy" ]
      },
      "org.apache.camel.model.RollbackDefinition" : {
        "title" : "Rollback",
        "description" : "Forces a rollback by stopping routing the message",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "mark-rollback-only" : {
              "type" : "boolean",
              "description" : "Mark the transaction for rollback only (cannot be overruled to commit)",
              "title" : "Mark Rollback Only"
            },
            "mark-rollback-only-last" : {
              "type" : "boolean",
              "description" : "Mark only last sub transaction for rollback only. When using sub transactions (if the transaction manager support this)",
              "title" : "Mark Rollback Only Last"
            },
            "message" : {
              "type" : "string",
              "description" : "Message to use in rollback exception",
              "title" : "Message"
            }
          }
        } ]
      },
      "org.apache.camel.model.RouteBuilderDefinition" : {
        "title" : "Route Builder",
        "description" : "To refer to a Java org.apache.camel.builder.RouteBuilder instance to use.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "ref" : {
              "type" : "string",
              "description" : "Reference to the route builder instance",
              "title" : "Ref"
            }
          }
        } ],
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.RouteConfigurationContextRefDefinition" : {
        "title" : "Route Configuration Context Ref",
        "description" : "To refer to an XML file with route configuration defined using the xml-dsl",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "ref" : {
              "type" : "string",
              "description" : "Reference to the route templates in the xml dsl",
              "title" : "Ref"
            }
          }
        } ],
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.RouteConfigurationDefinition" : {
        "type" : "object",
        "properties" : {
          "error-handler" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.ErrorHandlerDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "intercept" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.InterceptDefinition"
            }
          },
          "intercept-from" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.InterceptFromDefinition"
            }
          },
          "intercept-send-to-endpoint" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.InterceptSendToEndpointDefinition"
            }
          },
          "on-completion" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.OnCompletionDefinition"
            }
          },
          "on-exception" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.OnExceptionDefinition"
            }
          },
          "precondition" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.RouteContextRefDefinition" : {
        "title" : "Route Context Ref",
        "description" : "To refer to an XML file with routes defined using the xml-dsl",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "ref" : {
              "type" : "string",
              "description" : "Reference to the routes in the xml dsl",
              "title" : "Ref"
            }
          }
        } ],
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.RouteDefinition" : {
        "type" : "object",
        "properties" : {
          "auto-startup" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "from" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.FromDefinition"
          },
          "group" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "input-type" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.InputTypeDefinition"
          },
          "log-mask" : {
            "type" : "boolean"
          },
          "message-history" : {
            "type" : "boolean"
          },
          "node-prefix-id" : {
            "type" : "string"
          },
          "output-type" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.OutputTypeDefinition"
          },
          "precondition" : {
            "type" : "string"
          },
          "route-configuration-id" : {
            "type" : "string"
          },
          "route-policy" : {
            "type" : "string"
          },
          "startup-order" : {
            "type" : "number"
          },
          "stream-caching" : {
            "type" : "boolean"
          },
          "trace" : {
            "type" : "boolean"
          }
        },
        "required" : [ "from" ]
      },
      "org.apache.camel.model.RouteTemplateBeanDefinition" : {
        "type" : "object",
        "properties" : {
          "bean-type" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object"
          },
          "property" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "script" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "required" : [ "name", "type" ]
      },
      "org.apache.camel.model.RouteTemplateDefinition" : {
        "type" : "object",
        "properties" : {
          "beans" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteTemplateBeanDefinition"
            }
          },
          "description" : {
            "type" : "string"
          },
          "from" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.FromDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteTemplateParameterDefinition"
            }
          },
          "route" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.RouteDefinition"
          }
        },
        "required" : [ "id" ]
      },
      "org.apache.camel.model.RouteTemplateParameterDefinition" : {
        "title" : "Template Parameter",
        "description" : "A route template parameter",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "default-value" : {
            "type" : "string",
            "description" : "Default value of the parameter. If a default value is provided then the parameter is implied not to be required.",
            "title" : "Default Value"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the parameter",
            "title" : "Description"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the parameter",
            "title" : "Name"
          },
          "required" : {
            "type" : "boolean",
            "description" : "Whether the parameter is required or not. A parameter is required unless this option is set to false or a default value has been configured.",
            "title" : "Required"
          }
        },
        "required" : [ "name" ]
      },
      "org.apache.camel.model.RoutingSlipDefinition" : {
        "title" : "Routing Slip",
        "description" : "Routes a message through a series of steps that are pre-determined (the slip)",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "cache-size" : {
              "type" : "number",
              "description" : "Sets the maximum size used by the org.apache.camel.spi.ProducerCache which is used to cache and reuse producers when using this routing slip, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
              "title" : "Cache Size"
            },
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "expression" : {
              "description" : "Expression to define the routing slip, which defines which endpoints to route the message in a pipeline style. Notice the expression is evaluated once, if you want a more dynamic style, then the dynamic router eip is a better choice.",
              "title" : "Expression",
              "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
            },
            "id" : {
              "type" : "string"
            },
            "ignore-invalid-endpoints" : {
              "type" : "boolean",
              "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
              "title" : "Ignore Invalid Endpoints"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "uri-delimiter" : {
              "type" : "string",
              "description" : "Sets the uri delimiter to use",
              "title" : "Uri Delimiter",
              "default" : ","
            }
          }
        } ],
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ]
      },
      "org.apache.camel.model.SagaActionUriDefinition" : {
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "parameters" : {
              "type" : "object"
            },
            "uri" : {
              "type" : "string"
            }
          }
        } ],
        "required" : [ "uri" ]
      },
      "org.apache.camel.model.SagaDefinition" : {
        "title" : "Saga",
        "description" : "Enables Sagas on the route",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "compensation" : {
            "description" : "The compensation endpoint URI that must be called to compensate all changes done in the route. The route corresponding to the compensation URI must perform compensation and complete without error. If errors occur during compensation, the saga service may call again the compensation URI to retry.",
            "title" : "Compensation",
            "$ref" : "#/items/definitions/org.apache.camel.model.SagaActionUriDefinition"
          },
          "completion" : {
            "description" : "The completion endpoint URI that will be called when the Saga is completed successfully. The route corresponding to the completion URI must perform completion tasks and terminate without error. If errors occur during completion, the saga service may call again the completion URI to retry.",
            "title" : "Completion",
            "$ref" : "#/items/definitions/org.apache.camel.model.SagaActionUriDefinition"
          },
          "completion-mode" : {
            "type" : "string",
            "description" : "Determine how the saga should be considered complete. When set to AUTO, the saga is completed when the exchange that initiates the saga is processed successfully, or compensated when it completes exceptionally. When set to MANUAL, the user must complete or compensate the saga using the saga:complete or saga:compensate endpoints.",
            "title" : "Completion Mode",
            "default" : "AUTO",
            "enum" : [ "AUTO", "MANUAL" ]
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "option" : {
            "type" : "array",
            "description" : "Allows to save properties of the current exchange in order to re-use them in a compensation/completion callback route. Options are usually helpful e.g. to store and retrieve identifiers of objects that should be deleted in compensating actions. Option values will be transformed into input headers of the compensation/completion exchange.",
            "title" : "Option",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyExpressionDefinition"
            }
          },
          "propagation" : {
            "type" : "string",
            "description" : "Set the Saga propagation mode (REQUIRED, REQUIRES_NEW, MANDATORY, SUPPORTS, NOT_SUPPORTED, NEVER).",
            "title" : "Propagation",
            "default" : "REQUIRED",
            "enum" : [ "REQUIRED", "REQUIRES_NEW", "MANDATORY", "SUPPORTS", "NOT_SUPPORTED", "NEVER" ]
          },
          "saga-service" : {
            "type" : "string",
            "description" : "Refers to the id to lookup in the registry for the specific CamelSagaService to use.",
            "title" : "Saga Service"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "timeout" : {
            "type" : "string",
            "description" : "Set the maximum amount of time for the Saga. After the timeout is expired, the saga will be compensated automatically (unless a different decision has been taken in the meantime).",
            "title" : "Timeout"
          }
        }
      },
      "org.apache.camel.model.SamplingDefinition" : {
        "title" : "Sample",
        "description" : "Extract a sample of the messages passing through a route",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "message-frequency" : {
              "type" : "number",
              "description" : "Sets the sample message count which only a single Exchange will pass through after this many received.",
              "title" : "Message Frequency"
            },
            "sample-period" : {
              "type" : "string",
              "description" : "Sets the sample period during which only a single Exchange will pass through.",
              "title" : "Sample Period",
              "default" : "1000"
            }
          }
        } ]
      },
      "org.apache.camel.model.ScriptDefinition" : {
        "title" : "Script",
        "description" : "Executes a script from a language which does not change the message body.",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to return the transformed message body (the new message body to use)",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          }
        }
      },
      "org.apache.camel.model.SetBodyDefinition" : {
        "title" : "Set Body",
        "description" : "Sets the contents of the message body",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression that returns the new body to use",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          }
        }
      },
      "org.apache.camel.model.SetExchangePatternDefinition" : {
        "title" : "Set Exchange Pattern",
        "description" : "Sets the exchange pattern on the message exchange",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "pattern" : {
              "type" : "string",
              "description" : "Sets the new exchange pattern of the Exchange to be used from this point forward",
              "title" : "Pattern",
              "enum" : [ "InOnly", "InOut" ]
            }
          }
        } ]
      },
      "org.apache.camel.model.SetHeaderDefinition" : {
        "title" : "Set Header",
        "description" : "Sets the value of a message header",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to return the value of the header",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of message header to set a new value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used.",
            "title" : "Name"
          }
        },
        "required" : [ "name" ]
      },
      "org.apache.camel.model.SetPropertyDefinition" : {
        "title" : "Set Property",
        "description" : "Sets a named property on the message exchange",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to return the value of the message exchange property",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of exchange property to set a new value. The simple language can be used to define a dynamic evaluated exchange property name to be used. Otherwise a constant name will be used.",
            "title" : "Name"
          }
        },
        "required" : [ "name" ]
      },
      "org.apache.camel.model.SortDefinition" : {
        "title" : "Sort",
        "description" : "Sorts the contents of the message",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "comparator" : {
            "type" : "string",
            "description" : "Sets the comparator to use for sorting",
            "title" : "Comparator"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Optional expression to sort by something else than the message body",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          }
        }
      },
      "org.apache.camel.model.SplitDefinition" : {
        "title" : "Split",
        "description" : "Splits a single message into many sub-messages.",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "aggregation-strategy" : {
            "type" : "string",
            "description" : "Sets a reference to the AggregationStrategy to be used to assemble the replies from the split messages, into a single outgoing message from the Splitter. By default Camel will use the original incoming message to the splitter (leave it unchanged). You can also use a POJO as the AggregationStrategy",
            "title" : "Aggregation Strategy"
          },
          "aggregation-strategy-method-allow-null" : {
            "type" : "boolean",
            "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy",
            "title" : "Aggregation Strategy Method Allow Null"
          },
          "aggregation-strategy-method-name" : {
            "type" : "string",
            "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
            "title" : "Aggregation Strategy Method Name"
          },
          "delimiter" : {
            "type" : "string",
            "description" : "Delimiter used in splitting messages. Can be turned off using the value false. The default value is ,",
            "title" : "Delimiter",
            "default" : ","
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatically implied, and you do not have to enable that option as well.",
            "title" : "Executor Service"
          },
          "expression" : {
            "description" : "Expression of how to split the message body, such as as-is, using a tokenizer, or using a xpath.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "on-prepare" : {
            "type" : "string",
            "description" : "Uses the Processor when preparing the org.apache.camel.Exchange to be sent. This can be used to deep-clone messages that should be sent, or any custom logic needed before the exchange is sent.",
            "title" : "On Prepare"
          },
          "parallel-aggregate" : {
            "type" : "boolean",
            "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Camel synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe.",
            "title" : "Parallel Aggregate"
          },
          "parallel-processing" : {
            "type" : "boolean",
            "description" : "If enabled then processing each split messages occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. It's only processing the sub messages from the splitter which happens concurrently. When parallel processing is enabled, then the Camel routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the splitter, then make sure to enable the synchronous option as well.",
            "title" : "Parallel Processing"
          },
          "share-unit-of-work" : {
            "type" : "boolean",
            "description" : "Shares the org.apache.camel.spi.UnitOfWork with the parent and each of the sub messages. Splitter will by default not share unit of work between the parent exchange and each split exchange. This means each split exchange has its own individual unit of work.",
            "title" : "Share Unit Of Work"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          },
          "stop-on-exception" : {
            "type" : "boolean",
            "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.apache.camel.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the splitter will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end",
            "title" : "Stop On Exception"
          },
          "streaming" : {
            "type" : "boolean",
            "description" : "When in streaming mode, then the splitter splits the original message on-demand, and each split message is processed one by one. This reduces memory usage as the splitter do not split all the messages first, but then we do not know the total size, and therefore the org.apache.camel.Exchange#SPLIT_SIZE is empty. In non-streaming mode (default) the splitter will split each message first, to know the total size, and then process each message one by one. This requires to keep all the split messages in memory and therefore requires more memory. The total size is provided in the org.apache.camel.Exchange#SPLIT_SIZE header. The streaming mode also affects the aggregation behavior. If enabled then Camel will process replies out-of-order, e.g. in the order they come back. If disabled, Camel will process replies in the same order as the messages was split.",
            "title" : "Streaming"
          },
          "synchronous" : {
            "type" : "boolean",
            "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the split is complete, even if parallel processing is enabled.",
            "title" : "Synchronous"
          },
          "timeout" : {
            "type" : "string",
            "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Splitter hasn't been able to split and process all the sub messages within the given timeframe, then the timeout triggers and the Splitter breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Camel to shut down in a graceful manner may continue to run. So use this option with a bit of care.",
            "title" : "Timeout",
            "default" : "0"
          }
        }
      },
      "org.apache.camel.model.StepDefinition" : {
        "title" : "Step",
        "description" : "Routes the message to a sequence of processors which is grouped together as one logical name",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.StopDefinition" : {
        "title" : "Stop",
        "description" : "Stops the processing of the current message",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          }
        }
      },
      "org.apache.camel.model.TemplatedRouteBeanDefinition" : {
        "type" : "object",
        "properties" : {
          "bean-type" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object"
          },
          "property" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "script" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "required" : [ "name", "type" ]
      },
      "org.apache.camel.model.TemplatedRouteDefinition" : {
        "type" : "object",
        "properties" : {
          "beans" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.TemplatedRouteBeanDefinition"
            }
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.TemplatedRouteParameterDefinition"
            }
          },
          "prefix-id" : {
            "type" : "string"
          },
          "route-id" : {
            "type" : "string"
          },
          "route-template-ref" : {
            "type" : "string"
          }
        },
        "required" : [ "route-template-ref" ]
      },
      "org.apache.camel.model.TemplatedRouteParameterDefinition" : {
        "title" : "Templated Route Parameter",
        "description" : "An input parameter of a route template.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the parameter",
            "title" : "Name"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the parameter.",
            "title" : "Value"
          }
        },
        "required" : [ "name", "value" ]
      },
      "org.apache.camel.model.ThreadPoolProfileDefinition" : {
        "title" : "Thread Pool Profile",
        "description" : "To configure thread pools",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-core-thread-time-out" : {
            "type" : "boolean",
            "description" : "Whether idle core threads is allowed to timeout and therefore can shrink the pool size below the core pool size Is by default true",
            "title" : "Allow Core Thread Time Out"
          },
          "default-profile" : {
            "type" : "boolean",
            "description" : "Whether this profile is the default thread pool profile",
            "title" : "Default Profile"
          },
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "keep-alive-time" : {
            "type" : "number",
            "description" : "Sets the keep alive time for idle threads in the pool",
            "title" : "Keep Alive Time"
          },
          "max-pool-size" : {
            "type" : "number",
            "description" : "Sets the maximum pool size",
            "title" : "Max Pool Size"
          },
          "max-queue-size" : {
            "type" : "number",
            "description" : "Sets the maximum number of tasks in the work queue. Use -1 or Integer.MAX_VALUE for an unbounded queue",
            "title" : "Max Queue Size"
          },
          "pool-size" : {
            "type" : "number",
            "description" : "Sets the core pool size",
            "title" : "Pool Size"
          },
          "rejected-policy" : {
            "type" : "string",
            "description" : "Sets the handler for tasks which cannot be executed by the thread pool.",
            "title" : "Rejected Policy",
            "enum" : [ "Abort", "CallerRuns" ]
          },
          "time-unit" : {
            "type" : "string",
            "description" : "Sets the time unit to use for keep alive time By default SECONDS is used.",
            "title" : "Time Unit",
            "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ]
          }
        }
      },
      "org.apache.camel.model.ThreadsDefinition" : {
        "title" : "Threads",
        "description" : "Specifies that all steps after this node are processed asynchronously",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-core-thread-time-out" : {
            "type" : "boolean",
            "description" : "Whether idle core threads are allowed to timeout and therefore can shrink the pool size below the core pool size Is by default false",
            "title" : "Allow Core Thread Time Out"
          },
          "caller-runs-when-rejected" : {
            "type" : "string",
            "description" : "Whether or not to use as caller runs as fallback when a task is rejected being added to the thread pool (when its full). This is only used as fallback if no rejectedPolicy has been configured, or the thread pool has no configured rejection handler. Is by default true",
            "title" : "Caller Runs When Rejected",
            "default" : "true"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "To use a custom thread pool",
            "title" : "Executor Service"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "keep-alive-time" : {
            "type" : "number",
            "description" : "Sets the keep alive time for idle threads",
            "title" : "Keep Alive Time"
          },
          "max-pool-size" : {
            "type" : "number",
            "description" : "Sets the maximum pool size",
            "title" : "Max Pool Size"
          },
          "max-queue-size" : {
            "type" : "number",
            "description" : "Sets the maximum number of tasks in the work queue. Use -1 or Integer.MAX_VALUE for an unbounded queue",
            "title" : "Max Queue Size"
          },
          "pool-size" : {
            "type" : "number",
            "description" : "Sets the core pool size",
            "title" : "Pool Size"
          },
          "rejected-policy" : {
            "type" : "string",
            "description" : "Sets the handler for tasks which cannot be executed by the thread pool.",
            "title" : "Rejected Policy",
            "enum" : [ "Abort", "CallerRuns" ]
          },
          "thread-name" : {
            "type" : "string",
            "description" : "Sets the thread name to use.",
            "title" : "Thread Name",
            "default" : "Threads"
          },
          "time-unit" : {
            "type" : "string",
            "description" : "Sets the keep alive time unit. By default SECONDS is used.",
            "title" : "Time Unit",
            "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ]
          }
        }
      },
      "org.apache.camel.model.ThrottleDefinition" : {
        "title" : "Throttle",
        "description" : "Controls the rate at which messages are passed to the next node in the route",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "async-delayed" : {
            "type" : "boolean",
            "description" : "Enables asynchronous delay which means the thread will not block while delaying.",
            "title" : "Async Delayed"
          },
          "caller-runs-when-rejected" : {
            "type" : "boolean",
            "description" : "Whether or not the caller should run the task when it was rejected by the thread pool. Is by default true",
            "title" : "Caller Runs When Rejected"
          },
          "correlation-expression" : {
            "description" : "The expression used to calculate the correlation key to use for throttle grouping. The Exchange which has the same correlation key is throttled together.",
            "title" : "Correlation Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "To use a custom thread pool (ScheduledExecutorService) by the throttler.",
            "title" : "Executor Service"
          },
          "expression" : {
            "description" : "Expression to configure the maximum number of messages to throttle per request",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "reject-execution" : {
            "type" : "boolean",
            "description" : "Whether or not throttler throws the ThrottlerRejectedExecutionException when the exchange exceeds the request limit Is by default false",
            "title" : "Reject Execution"
          },
          "time-period-millis" : {
            "type" : "string",
            "description" : "Sets the time period during which the maximum request count is valid for",
            "title" : "Time Period Millis",
            "default" : "1000"
          }
        }
      },
      "org.apache.camel.model.ThrowExceptionDefinition" : {
        "title" : "Throw Exception",
        "description" : "Throws an exception",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "exception-type" : {
            "type" : "string",
            "description" : "The class of the exception to create using the message.",
            "title" : "Exception Type"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "message" : {
            "type" : "string",
            "description" : "To create a new exception instance and use the given message as caused message (supports simple language)",
            "title" : "Message"
          },
          "ref" : {
            "type" : "string",
            "description" : "Reference to the exception instance to lookup from the registry to throw",
            "title" : "Ref"
          }
        }
      },
      "org.apache.camel.model.ToDefinition" : {
        "title" : "To",
        "description" : "Sends the message to a static endpoint",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "parameters" : {
              "type" : "object"
            },
            "pattern" : {
              "type" : "string",
              "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
              "title" : "Pattern",
              "enum" : [ "InOnly", "InOut" ]
            },
            "uri" : {
              "type" : "string",
              "description" : "Sets the uri of the endpoint to send to.",
              "title" : "Uri"
            }
          }
        } ],
        "required" : [ "uri" ]
      },
      "org.apache.camel.model.ToDynamicDefinition" : {
        "title" : "To D",
        "description" : "Sends the message to a dynamic endpoint",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "allow-optimised-components" : {
              "type" : "boolean",
              "description" : "Whether to allow components to optimise toD if they are org.apache.camel.spi.SendDynamicAware .",
              "title" : "Allow Optimised Components"
            },
            "auto-start-components" : {
              "type" : "boolean",
              "description" : "Whether to auto startup components when toD is starting up.",
              "title" : "Auto Start Components"
            },
            "cache-size" : {
              "type" : "number",
              "description" : "Sets the maximum size used by the org.apache.camel.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
              "title" : "Cache Size"
            },
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "id" : {
              "type" : "string"
            },
            "ignore-invalid-endpoint" : {
              "type" : "boolean",
              "description" : "Whether to ignore invalid endpoint URIs and skip sending the message.",
              "title" : "Ignore Invalid Endpoint"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "parameters" : {
              "type" : "object"
            },
            "pattern" : {
              "type" : "string",
              "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
              "title" : "Pattern",
              "enum" : [ "InOnly", "InOut" ]
            },
            "uri" : {
              "type" : "string",
              "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.apache.camel.language.simple.SimpleLanguage expression.",
              "title" : "Uri"
            }
          }
        } ],
        "required" : [ "uri" ]
      },
      "org.apache.camel.model.TransactedDefinition" : {
        "title" : "Transacted",
        "description" : "Enables transaction on the route",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "ref" : {
            "type" : "string",
            "description" : "Sets a reference to use for lookup the policy in the registry.",
            "title" : "Ref"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.TransformDefinition" : {
        "title" : "Transform",
        "description" : "Transforms the message body based on an expression",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to return the transformed message body (the new message body to use)",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "from-type" : {
            "type" : "string",
            "description" : "From type used in data type transformation.",
            "title" : "From Type"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "to-type" : {
            "type" : "string",
            "description" : "To type used as a target data type in the transformation.",
            "title" : "To Type"
          }
        }
      },
      "org.apache.camel.model.TryDefinition" : {
        "title" : "Do Try",
        "description" : "Marks the beginning of a try, catch, finally block",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "do-catch" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.CatchDefinition"
            }
          },
          "do-finally" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.FinallyDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.UnmarshalDefinition" : {
        "title" : "Unmarshal",
        "description" : "Converts the message data received from the wire into a format that Apache Camel processors can consume",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-null-body" : {
            "type" : "boolean",
            "description" : "Indicates whether null is allowed as value of a body to unmarshall.",
            "title" : "Allow Null Body"
          },
          "asn1" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ASN1DataFormat"
          },
          "avro" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.AvroDataFormat"
          },
          "barcode" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BarcodeDataFormat"
          },
          "base64" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.Base64DataFormat"
          },
          "bindy" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BindyDataFormat"
          },
          "cbor" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CBORDataFormat"
          },
          "crypto" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CryptoDataFormat"
          },
          "csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CsvDataFormat"
          },
          "custom" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CustomDataFormat"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "fhir-json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirJsonDataFormat"
          },
          "fhir-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirXmlDataFormat"
          },
          "flatpack" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FlatpackDataFormat"
          },
          "grok" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GrokDataFormat"
          },
          "gzip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GzipDeflaterDataFormat"
          },
          "hl7" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.HL7DataFormat"
          },
          "ical" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.IcalDataFormat"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "jackson-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JacksonXMLDataFormat"
          },
          "jaxb" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JaxbDataFormat"
          },
          "json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonDataFormat"
          },
          "json-api" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonApiDataFormat"
          },
          "lzf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.LZFDataFormat"
          },
          "mime-multipart" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.MimeMultipartDataFormat"
          },
          "parquet-avro" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ParquetAvroDataFormat"
          },
          "pgp" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.PGPDataFormat"
          },
          "protobuf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ProtobufDataFormat"
          },
          "rss" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.RssDataFormat"
          },
          "soap" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SoapDataFormat"
          },
          "swift-mt" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMtDataFormat"
          },
          "swift-mx" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMxDataFormat"
          },
          "syslog" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SyslogDataFormat"
          },
          "tar-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TarFileDataFormat"
          },
          "thrift" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ThriftDataFormat"
          },
          "tidy-markup" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TidyMarkupDataFormat"
          },
          "univocity-csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityCsvDataFormat"
          },
          "univocity-fixed" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityFixedDataFormat"
          },
          "univocity-tsv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityTsvDataFormat"
          },
          "xml-security" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.XMLSecurityDataFormat"
          },
          "yaml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.YAMLDataFormat"
          },
          "zip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipDeflaterDataFormat"
          },
          "zip-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipFileDataFormat"
          }
        }
      },
      "org.apache.camel.model.ValidateDefinition" : {
        "title" : "Validate",
        "description" : "Validates a message based on an expression",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression to use for validation as a predicate. The expression should return either true or false. If returning false the message is invalid and an exception is thrown.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "predicate-exception-factory" : {
            "type" : "string",
            "description" : "The bean id of custom PredicateExceptionFactory to use for creating the exception when the validation fails. By default, Camel will throw PredicateValidationException. By using a custom factory you can control which exception to throw instead.",
            "title" : "Predicate Exception Factory"
          }
        }
      },
      "org.apache.camel.model.ValueDefinition" : {
        "title" : "Value",
        "description" : "A single value",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "string",
              "description" : "Property value",
              "title" : "Value"
            }
          }
        } ]
      },
      "org.apache.camel.model.WhenDefinition" : {
        "title" : "When",
        "description" : "Triggers a route when the expression evaluates to true",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression used as the predicate to evaluate whether this when should trigger and route the message or not.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.WhenSkipSendToEndpointDefinition" : {
        "title" : "When Skip Send To Endpoint",
        "description" : "Predicate to determine if the message should be sent or not to the endpoint, when using interceptSentToEndpoint.",
        "deprecated" : "false",
        "type" : "object",
        "anyOf" : [ {
          "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
        } ],
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "expression" : {
            "description" : "Expression used as the predicate to evaluate whether the message should be sent or not to the endpoint",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "id" : {
            "type" : "string"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ProcessorDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.WireTapDefinition" : {
        "title" : "Wire Tap",
        "description" : "Routes a copy of a message (or creates a new message) to a secondary destination while continue routing the original message.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-optimised-components" : {
            "type" : "boolean",
            "description" : "Whether to allow components to optimise toD if they are org.apache.camel.spi.SendDynamicAware .",
            "title" : "Allow Optimised Components"
          },
          "auto-start-components" : {
            "type" : "boolean",
            "description" : "Whether to auto startup components when toD is starting up.",
            "title" : "Auto Start Components"
          },
          "cache-size" : {
            "type" : "number",
            "description" : "Sets the maximum size used by the org.apache.camel.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
            "title" : "Cache Size"
          },
          "copy" : {
            "type" : "boolean",
            "description" : "Uses a copy of the original exchange",
            "title" : "Copy"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "dynamic-uri" : {
            "type" : "boolean",
            "description" : "Whether the uri is dynamic or static. If the uri is dynamic then the simple language is used to evaluate a dynamic uri to use as the wire-tap destination, for each incoming message. This works similar to how the toD EIP pattern works. If static then the uri is used as-is as the wire-tap destination.",
            "title" : "Dynamic Uri"
          },
          "executor-service" : {
            "type" : "string",
            "description" : "Uses a custom thread pool",
            "title" : "Executor Service"
          },
          "id" : {
            "type" : "string"
          },
          "ignore-invalid-endpoint" : {
            "type" : "boolean",
            "description" : "Whether to ignore invalid endpoint URIs and skip sending the message.",
            "title" : "Ignore Invalid Endpoint"
          },
          "inherit-error-handler" : {
            "type" : "boolean"
          },
          "on-prepare" : {
            "type" : "string",
            "description" : "Uses the Processor when preparing the org.apache.camel.Exchange to be sent. This can be used to deep-clone messages that should be sent, or any custom logic needed before the exchange is sent.",
            "title" : "On Prepare"
          },
          "parameters" : {
            "type" : "object"
          },
          "pattern" : {
            "type" : "string",
            "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
            "title" : "Pattern",
            "enum" : [ "InOnly", "InOut" ]
          },
          "uri" : {
            "type" : "string",
            "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.apache.camel.language.simple.SimpleLanguage expression.",
            "title" : "Uri"
          }
        },
        "required" : [ "uri" ]
      },
      "org.apache.camel.model.app.ApplicationDefinition" : {
        "title" : "Camel",
        "description" : "If beans reminds Spring application too much, we can use camel.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "bean" : {
            "type" : "array",
            "title" : "Bean",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.app.RegistryBeanDefinition"
            }
          },
          "component-scan" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.app.ComponentScanDefinition"
            }
          },
          "rest" : {
            "type" : "array",
            "title" : "Rest",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestDefinition"
            }
          },
          "rest-configuration" : {
            "type" : "array",
            "title" : "Rest Configuration",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestConfigurationDefinition"
            }
          },
          "route" : {
            "type" : "array",
            "title" : "Route",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteDefinition"
            }
          },
          "route-configuration" : {
            "type" : "array",
            "title" : "Route Configuration",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteConfigurationDefinition"
            }
          },
          "route-template" : {
            "type" : "array",
            "title" : "Route Template",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteTemplateDefinition"
            }
          },
          "templated-route" : {
            "type" : "array",
            "title" : "Templated Route",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.TemplatedRouteDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.app.BeanPropertiesDefinition" : {
        "type" : "object",
        "properties" : {
          "property" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.app.BeanPropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.app.BeanPropertyDefinition" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.app.BeanPropertiesDefinition"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.app.BeansDefinition" : {
        "title" : "Beans",
        "description" : "A groupping POJO (and related XML root element) that's historically associated with entire application (or its distinguished fragment). This class is not meant to be used with Camel Java DSL, but it's needed to generate XML Schema and MX parser methods.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "bean" : {
            "type" : "array",
            "title" : "Bean",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.app.RegistryBeanDefinition"
            }
          },
          "component-scan" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.app.ComponentScanDefinition"
            }
          },
          "rest" : {
            "type" : "array",
            "title" : "Rest",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestDefinition"
            }
          },
          "rest-configuration" : {
            "type" : "array",
            "title" : "Rest Configuration",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestConfigurationDefinition"
            }
          },
          "route" : {
            "type" : "array",
            "title" : "Route",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteDefinition"
            }
          },
          "route-configuration" : {
            "type" : "array",
            "title" : "Route Configuration",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteConfigurationDefinition"
            }
          },
          "route-template" : {
            "type" : "array",
            "title" : "Route Template",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.RouteTemplateDefinition"
            }
          },
          "templated-route" : {
            "type" : "array",
            "title" : "Templated Route",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.TemplatedRouteDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.app.ComponentScanDefinition" : {
        "type" : "object",
        "properties" : {
          "base-package" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.app.RegistryBeanDefinition" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.cloud.BlacklistServiceCallServiceFilterConfiguration" : {
        "title" : "Blacklist Service Filter",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "servers" : {
            "type" : "array",
            "description" : "Sets the server blacklist. Each entry can be a list of servers separated by comma in the format: servicehost:port,servicehost2:port,servicehost3:port",
            "title" : "Servers",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.CachingServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Caching Service Discovery",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "combined-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration"
          },
          "consul-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration"
          },
          "dns-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.DnsServiceCallServiceDiscoveryConfiguration"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "kubernetes-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "static-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.StaticServiceCallServiceDiscoveryConfiguration"
          },
          "timeout" : {
            "type" : "number",
            "description" : "Set the time the services will be retained.",
            "title" : "Timeout",
            "default" : "60"
          },
          "units" : {
            "type" : "string",
            "description" : "Set the time unit for the timeout.",
            "title" : "Units",
            "default" : "SECONDS",
            "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ]
          }
        }
      },
      "org.apache.camel.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Combined Service Discovery",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "caching-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CachingServiceCallServiceDiscoveryConfiguration"
          },
          "consul-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration"
          },
          "dns-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.DnsServiceCallServiceDiscoveryConfiguration"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "kubernetes-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "static-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.StaticServiceCallServiceDiscoveryConfiguration"
          }
        }
      },
      "org.apache.camel.model.cloud.CombinedServiceCallServiceFilterConfiguration" : {
        "title" : "Combined Service Filter",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "blacklist-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.BlacklistServiceCallServiceFilterConfiguration"
          },
          "custom-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CustomServiceCallServiceFilterConfiguration"
          },
          "healthy-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.HealthyServiceCallServiceFilterConfiguration"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "pass-through-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.PassThroughServiceCallServiceFilterConfiguration"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Consul Service Discovery",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "acl-token" : {
            "type" : "string",
            "description" : "Sets the ACL token to be used with Consul",
            "title" : "Acl Token"
          },
          "block-seconds" : {
            "type" : "number",
            "description" : "The seconds to wait for a watch event, default 10 seconds",
            "title" : "Block Seconds",
            "default" : "10"
          },
          "connect-timeout-millis" : {
            "type" : "number",
            "description" : "Connect timeout for OkHttpClient",
            "title" : "Connect Timeout Millis"
          },
          "datacenter" : {
            "type" : "string",
            "description" : "The data center",
            "title" : "Datacenter"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "password" : {
            "type" : "string",
            "description" : "Sets the password to be used for basic authentication",
            "title" : "Password"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "read-timeout-millis" : {
            "type" : "number",
            "description" : "Read timeout for OkHttpClient",
            "title" : "Read Timeout Millis"
          },
          "url" : {
            "type" : "string",
            "description" : "The Consul agent URL",
            "title" : "Url"
          },
          "user-name" : {
            "type" : "string",
            "description" : "Sets the username to be used for basic authentication",
            "title" : "User Name"
          },
          "write-timeout-millis" : {
            "type" : "number",
            "description" : "Write timeout for OkHttpClient",
            "title" : "Write Timeout Millis"
          }
        }
      },
      "org.apache.camel.model.cloud.CustomServiceCallServiceFilterConfiguration" : {
        "title" : "Custom Service Filter",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "ref" : {
            "type" : "string",
            "description" : "Reference of a ServiceFilter",
            "title" : "Ref"
          }
        }
      },
      "org.apache.camel.model.cloud.DefaultServiceCallServiceLoadBalancerConfiguration" : {
        "title" : "Default Load Balancer",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.DnsServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Dns Service Discovery",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "domain" : {
            "type" : "string",
            "description" : "The domain name;",
            "title" : "Domain"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "proto" : {
            "type" : "string",
            "description" : "The transport protocol of the desired service.",
            "title" : "Proto",
            "default" : "_tcp"
          }
        }
      },
      "org.apache.camel.model.cloud.HealthyServiceCallServiceFilterConfiguration" : {
        "title" : "Healthy Service Filter",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Kubernetes Service Discovery",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "api-version" : {
            "type" : "string",
            "description" : "Sets the API version when using client lookup",
            "title" : "Api Version"
          },
          "ca-cert-data" : {
            "type" : "string",
            "description" : "Sets the Certificate Authority data when using client lookup",
            "title" : "Ca Cert Data"
          },
          "ca-cert-file" : {
            "type" : "string",
            "description" : "Sets the Certificate Authority data that are loaded from the file when using client lookup",
            "title" : "Ca Cert File"
          },
          "client-cert-data" : {
            "type" : "string",
            "description" : "Sets the Client Certificate data when using client lookup",
            "title" : "Client Cert Data"
          },
          "client-cert-file" : {
            "type" : "string",
            "description" : "Sets the Client Certificate data that are loaded from the file when using client lookup",
            "title" : "Client Cert File"
          },
          "client-key-algo" : {
            "type" : "string",
            "description" : "Sets the Client Keystore algorithm, such as RSA when using client lookup",
            "title" : "Client Key Algo"
          },
          "client-key-data" : {
            "type" : "string",
            "description" : "Sets the Client Keystore data when using client lookup",
            "title" : "Client Key Data"
          },
          "client-key-file" : {
            "type" : "string",
            "description" : "Sets the Client Keystore data that are loaded from the file when using client lookup",
            "title" : "Client Key File"
          },
          "client-key-passphrase" : {
            "type" : "string",
            "description" : "Sets the Client Keystore passphrase when using client lookup",
            "title" : "Client Key Passphrase"
          },
          "dns-domain" : {
            "type" : "string",
            "description" : "Sets the DNS domain to use for DNS lookup.",
            "title" : "Dns Domain"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "lookup" : {
            "type" : "string",
            "description" : "How to perform service lookup. Possible values: client, dns, environment. When using client, then the client queries the kubernetes master to obtain a list of active pods that provides the service, and then random (or round robin) select a pod. When using dns the service name is resolved as name.namespace.svc.dnsDomain. When using dnssrv the service name is resolved with SRV query for _._...svc... When using environment then environment variables are used to lookup the service. By default environment is used.",
            "title" : "Lookup",
            "default" : "environment",
            "enum" : [ "environment", "dns", "client" ]
          },
          "master-url" : {
            "type" : "string",
            "description" : "Sets the URL to the master when using client lookup",
            "title" : "Master Url"
          },
          "namespace" : {
            "type" : "string",
            "description" : "Sets the namespace to use. Will by default use namespace from the ENV variable KUBERNETES_MASTER.",
            "title" : "Namespace"
          },
          "oauth-token" : {
            "type" : "string",
            "description" : "Sets the OAUTH token for authentication (instead of username/password) when using client lookup",
            "title" : "Oauth Token"
          },
          "password" : {
            "type" : "string",
            "description" : "Sets the password for authentication when using client lookup",
            "title" : "Password"
          },
          "port-name" : {
            "type" : "string",
            "description" : "Sets the Port Name to use for DNS/DNSSRV lookup.",
            "title" : "Port Name"
          },
          "port-protocol" : {
            "type" : "string",
            "description" : "Sets the Port Protocol to use for DNS/DNSSRV lookup.",
            "title" : "Port Protocol"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "trust-certs" : {
            "type" : "boolean",
            "description" : "Sets whether to turn on trust certificate check when using client lookup",
            "title" : "Trust Certs"
          },
          "username" : {
            "type" : "string",
            "description" : "Sets the username for authentication when using client lookup",
            "title" : "Username"
          }
        }
      },
      "org.apache.camel.model.cloud.PassThroughServiceCallServiceFilterConfiguration" : {
        "title" : "Pass Through Service Filter",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.ServiceCallConfigurationDefinition" : {
        "title" : "Service Call Configuration",
        "description" : "Remote service call configuration",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "blacklist-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.BlacklistServiceCallServiceFilterConfiguration"
          },
          "caching-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CachingServiceCallServiceDiscoveryConfiguration"
          },
          "combined-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration"
          },
          "combined-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CombinedServiceCallServiceFilterConfiguration"
          },
          "component" : {
            "type" : "string",
            "description" : "The component to use.",
            "title" : "Component",
            "default" : "http"
          },
          "consul-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration"
          },
          "custom-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CustomServiceCallServiceFilterConfiguration"
          },
          "default-load-balancer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.DefaultServiceCallServiceLoadBalancerConfiguration"
          },
          "dns-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.DnsServiceCallServiceDiscoveryConfiguration"
          },
          "expression" : {
            "description" : "Configures the Expression using the given configuration.",
            "title" : "Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ServiceCallExpressionConfiguration"
          },
          "expression-ref" : {
            "type" : "string",
            "description" : "Set a reference to a custom Expression to use.",
            "title" : "Expression Ref"
          },
          "healthy-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.HealthyServiceCallServiceFilterConfiguration"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "kubernetes-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration"
          },
          "load-balancer-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a custom ServiceLoadBalancer to use.",
            "title" : "Load Balancer Ref"
          },
          "pass-through-service-filter" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.PassThroughServiceCallServiceFilterConfiguration"
          },
          "pattern" : {
            "type" : "string",
            "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
            "title" : "Pattern",
            "enum" : [ "InOnly", "InOut" ]
          },
          "service-chooser-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a custom ServiceChooser to use.",
            "title" : "Service Chooser Ref"
          },
          "service-discovery-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a custom ServiceDiscovery to use.",
            "title" : "Service Discovery Ref"
          },
          "service-filter-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a custom ServiceFilter to use.",
            "title" : "Service Filter Ref"
          },
          "static-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.StaticServiceCallServiceDiscoveryConfiguration"
          },
          "uri" : {
            "type" : "string",
            "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the simple language expression.",
            "title" : "Uri"
          },
          "zookeeper-service-discovery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ZooKeeperServiceCallServiceDiscoveryConfiguration"
          }
        }
      },
      "org.apache.camel.model.cloud.ServiceCallDefinition" : {
        "title" : "Service Call",
        "description" : "To call remote services",
        "deprecated" : "true",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "blacklist-service-filter" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.BlacklistServiceCallServiceFilterConfiguration"
            },
            "caching-service-discovery" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CachingServiceCallServiceDiscoveryConfiguration"
            },
            "combined-service-discovery" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration"
            },
            "combined-service-filter" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CombinedServiceCallServiceFilterConfiguration"
            },
            "component" : {
              "type" : "string",
              "description" : "The component to use.",
              "title" : "Component",
              "default" : "http"
            },
            "configuration-ref" : {
              "type" : "string",
              "description" : "Refers to a ServiceCall configuration to use",
              "title" : "Configuration Ref"
            },
            "consul-service-discovery" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration"
            },
            "custom-service-filter" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.CustomServiceCallServiceFilterConfiguration"
            },
            "default-load-balancer" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.DefaultServiceCallServiceLoadBalancerConfiguration"
            },
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "title" : "Disabled"
            },
            "dns-service-discovery" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.DnsServiceCallServiceDiscoveryConfiguration"
            },
            "expression" : {
              "description" : "Configures the Expression using the given configuration.",
              "title" : "Expression",
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ServiceCallExpressionConfiguration"
            },
            "expression-ref" : {
              "type" : "string",
              "description" : "Set a reference to a custom Expression to use.",
              "title" : "Expression Ref"
            },
            "healthy-service-filter" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.HealthyServiceCallServiceFilterConfiguration"
            },
            "id" : {
              "type" : "string"
            },
            "inherit-error-handler" : {
              "type" : "boolean"
            },
            "kubernetes-service-discovery" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration"
            },
            "load-balancer-ref" : {
              "type" : "string",
              "description" : "Sets a reference to a custom ServiceLoadBalancer to use.",
              "title" : "Load Balancer Ref"
            },
            "name" : {
              "type" : "string",
              "description" : "Sets the name of the service to use",
              "title" : "Name"
            },
            "pass-through-service-filter" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.PassThroughServiceCallServiceFilterConfiguration"
            },
            "pattern" : {
              "type" : "string",
              "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
              "title" : "Pattern",
              "enum" : [ "InOnly", "InOut" ]
            },
            "service-chooser-ref" : {
              "type" : "string",
              "description" : "Sets a reference to a custom ServiceChooser to use.",
              "title" : "Service Chooser Ref"
            },
            "service-discovery-ref" : {
              "type" : "string",
              "description" : "Sets a reference to a custom ServiceDiscovery to use.",
              "title" : "Service Discovery Ref"
            },
            "service-filter-ref" : {
              "type" : "string",
              "description" : "Sets a reference to a custom ServiceFilter to use.",
              "title" : "Service Filter Ref"
            },
            "static-service-discovery" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.StaticServiceCallServiceDiscoveryConfiguration"
            },
            "uri" : {
              "type" : "string",
              "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.apache.camel.language.simple.SimpleLanguage expression.",
              "title" : "Uri"
            },
            "zookeeper-service-discovery" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.cloud.ZooKeeperServiceCallServiceDiscoveryConfiguration"
            }
          }
        } ],
        "required" : [ "name" ]
      },
      "org.apache.camel.model.cloud.ServiceCallExpressionConfiguration" : {
        "title" : "Service Expression",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "expression-type" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "host-header" : {
            "type" : "string",
            "description" : "The header that holds the service host information, default ServiceCallConstants.SERVICE_HOST",
            "title" : "Host Header",
            "default" : "CamelServiceCallServiceHost"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "port-header" : {
            "type" : "string",
            "description" : "The header that holds the service port information, default ServiceCallConstants.SERVICE_PORT",
            "title" : "Port Header",
            "default" : "CamelServiceCallServicePort"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.ServiceCallServiceChooserConfiguration" : {
        "title" : "Service Chooser Configuration",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.ServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Service Discovery Configuration",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.ServiceCallServiceFilterConfiguration" : {
        "title" : "Service Filter Configuration",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.ServiceCallServiceLoadBalancerConfiguration" : {
        "title" : "Load Balancer Configuration",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.StaticServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Static Service Discovery",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "servers" : {
            "type" : "array",
            "description" : "Sets the server list. Each entry can be a list of servers separated by comma in the format: servicehost:port,servicehost2:port,servicehost3:port",
            "title" : "Servers",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "org.apache.camel.model.cloud.ZooKeeperServiceCallServiceDiscoveryConfiguration" : {
        "title" : "Zookeeper Service Discovery",
        "deprecated" : "true",
        "type" : "object",
        "properties" : {
          "base-path" : {
            "type" : "string",
            "description" : "Set the base path to store in ZK",
            "title" : "Base Path"
          },
          "connection-timeout" : {
            "type" : "string",
            "description" : "Connection timeout.",
            "title" : "Connection Timeout"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "namespace" : {
            "type" : "string",
            "description" : "As ZooKeeper is a shared space, users of a given cluster should stay within a pre-defined namespace. If a namespace is set here, all paths will get pre-pended with the namespace",
            "title" : "Namespace"
          },
          "nodes" : {
            "type" : "string",
            "description" : "A comma separate list of servers to connect to in the form host:port",
            "title" : "Nodes"
          },
          "properties" : {
            "type" : "array",
            "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
            "title" : "Properties",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
            }
          },
          "reconnect-base-sleep-time" : {
            "type" : "string",
            "description" : "Initial amount of time to wait between retries.",
            "title" : "Reconnect Base Sleep Time"
          },
          "reconnect-max-retries" : {
            "type" : "string",
            "description" : "Max number of times to retry",
            "title" : "Reconnect Max Retries"
          },
          "reconnect-max-sleep-time" : {
            "type" : "string",
            "description" : "Max time in ms to sleep on each retry",
            "title" : "Reconnect Max Sleep Time"
          },
          "session-timeout" : {
            "type" : "string",
            "description" : "Session timeout.",
            "title" : "Session Timeout"
          }
        },
        "required" : [ "base-path", "nodes" ]
      },
      "org.apache.camel.model.config.BatchResequencerConfig" : {
        "title" : "Batch-config",
        "description" : "Configures batch-processing resequence eip.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-duplicates" : {
            "type" : "boolean",
            "description" : "Whether to allow duplicates.",
            "title" : "Allow Duplicates"
          },
          "batch-size" : {
            "type" : "number",
            "description" : "Sets the size of the batch to be re-ordered. The default size is 100.",
            "title" : "Batch Size",
            "default" : "100"
          },
          "batch-timeout" : {
            "type" : "string",
            "description" : "Sets the timeout for collecting elements to be re-ordered. The default timeout is 1000 msec.",
            "title" : "Batch Timeout",
            "default" : "1000"
          },
          "ignore-invalid-exchanges" : {
            "type" : "boolean",
            "description" : "Whether to ignore invalid exchanges",
            "title" : "Ignore Invalid Exchanges"
          },
          "reverse" : {
            "type" : "boolean",
            "description" : "Whether to reverse the ordering.",
            "title" : "Reverse"
          }
        }
      },
      "org.apache.camel.model.config.StreamResequencerConfig" : {
        "title" : "Stream-config",
        "description" : "Configures stream-processing resequence eip.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "capacity" : {
            "type" : "number",
            "description" : "Sets the capacity of the resequencer inbound queue.",
            "title" : "Capacity",
            "default" : "1000"
          },
          "comparator" : {
            "type" : "string",
            "description" : "To use a custom comparator as a org.apache.camel.processor.resequencer.ExpressionResultComparator type.",
            "title" : "Comparator"
          },
          "delivery-attempt-interval" : {
            "type" : "string",
            "description" : "Sets the interval in milliseconds the stream resequencer will at most wait while waiting for condition of being able to deliver.",
            "title" : "Delivery Attempt Interval",
            "default" : "1000"
          },
          "ignore-invalid-exchanges" : {
            "type" : "boolean",
            "description" : "Whether to ignore invalid exchanges",
            "title" : "Ignore Invalid Exchanges"
          },
          "reject-old" : {
            "type" : "boolean",
            "description" : "If true, throws an exception when messages older than the last delivered message are processed",
            "title" : "Reject Old"
          },
          "timeout" : {
            "type" : "string",
            "description" : "Sets minimum time (milliseconds) to wait for missing elements (messages).",
            "title" : "Timeout",
            "default" : "1000"
          }
        }
      },
      "org.apache.camel.model.dataformat.ASN1DataFormat" : {
        "title" : "ASN.1 File",
        "description" : "Encode and decode data structures using Abstract Syntax Notation One (ASN.1).",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "unmarshal-type" : {
              "type" : "string",
              "description" : "Class to use when unmarshalling.",
              "title" : "Unmarshal Type"
            },
            "using-iterator" : {
              "type" : "boolean",
              "description" : "If the asn1 file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "title" : "Using Iterator"
            }
          }
        } ]
      },
      "org.apache.camel.model.dataformat.AvroDataFormat" : {
        "title" : "Avro",
        "description" : "Serialize and deserialize messages using Apache Avro binary data format.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "allow-jms-type" : {
              "type" : "boolean",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "title" : "Allow Jms Type"
            },
            "allow-unmarshall-type" : {
              "type" : "boolean",
              "description" : "If enabled then Jackson is allowed to attempt to use the CamelJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "title" : "Allow Unmarshall Type"
            },
            "auto-discover-object-mapper" : {
              "type" : "boolean",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "title" : "Auto Discover Object Mapper"
            },
            "auto-discover-schema-resolver" : {
              "type" : "boolean",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "title" : "Auto Discover Schema Resolver"
            },
            "collection-type" : {
              "type" : "string",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "title" : "Collection Type"
            },
            "content-type-header" : {
              "type" : "boolean",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "title" : "Content Type Header"
            },
            "disable-features" : {
              "type" : "string",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "title" : "Disable Features"
            },
            "enable-features" : {
              "type" : "string",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "title" : "Enable Features"
            },
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "include" : {
              "type" : "string",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "title" : "Include"
            },
            "instance-class-name" : {
              "type" : "string",
              "description" : "Class name to use for marshal and unmarshalling",
              "title" : "Instance Class Name"
            },
            "json-view" : {
              "type" : "string",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "title" : "Json View"
            },
            "library" : {
              "type" : "string",
              "description" : "Which Avro library to use.",
              "title" : "Library",
              "default" : "ApacheAvro",
              "enum" : [ "ApacheAvro", "Jackson" ]
            },
            "module-class-names" : {
              "type" : "string",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "title" : "Module Class Names"
            },
            "module-refs" : {
              "type" : "string",
              "description" : "To use custom Jackson modules referred from the Camel registry. Multiple modules can be separated by comma.",
              "title" : "Module Refs"
            },
            "object-mapper" : {
              "type" : "string",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "title" : "Object Mapper"
            },
            "schema-resolver" : {
              "type" : "string",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "title" : "Schema Resolver"
            },
            "timezone" : {
              "type" : "string",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "title" : "Timezone"
            },
            "unmarshal-type" : {
              "type" : "string",
              "description" : "Class name of the java type to use when unmarshalling",
              "title" : "Unmarshal Type"
            },
            "use-default-object-mapper" : {
              "type" : "boolean",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "title" : "Use Default Object Mapper"
            },
            "use-list" : {
              "type" : "boolean",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "title" : "Use List"
            }
          }
        } ]
      },
      "org.apache.camel.model.dataformat.BarcodeDataFormat" : {
        "title" : "Barcode",
        "description" : "Transform strings to various 1D/2D barcode bitmap formats and back.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "barcode-format" : {
            "type" : "string",
            "description" : "Barcode format such as QR-Code",
            "title" : "Barcode Format"
          },
          "height" : {
            "type" : "number",
            "description" : "Height of the barcode",
            "title" : "Height"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "image-type" : {
            "type" : "string",
            "description" : "Image type of the barcode such as png",
            "title" : "Image Type"
          },
          "width" : {
            "type" : "number",
            "description" : "Width of the barcode",
            "title" : "Width"
          }
        }
      },
      "org.apache.camel.model.dataformat.Base64DataFormat" : {
        "title" : "Base64",
        "description" : "Encode and decode data using Base64.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "line-length" : {
            "type" : "number",
            "description" : "To specific a maximum line length for the encoded data. By default 76 is used.",
            "title" : "Line Length",
            "default" : "76"
          },
          "line-separator" : {
            "type" : "string",
            "description" : "The line separators to use. Uses new line characters (CRLF) by default.",
            "title" : "Line Separator"
          },
          "url-safe" : {
            "type" : "boolean",
            "description" : "Instead of emitting '' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly handles both modes. Is by default false.",
            "title" : "Url Safe"
          }
        }
      },
      "org.apache.camel.model.dataformat.BindyDataFormat" : {
        "title" : "Bindy",
        "description" : "Marshal and unmarshal Java beans from and to flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-empty-stream" : {
            "type" : "boolean",
            "description" : "Whether to allow empty streams in the unmarshal process. If true, no exception will be thrown when a body without records is provided.",
            "title" : "Allow Empty Stream"
          },
          "class-type" : {
            "type" : "string",
            "description" : "Name of model class to use.",
            "title" : "Class Type"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "locale" : {
            "type" : "string",
            "description" : "To configure a default locale to use, such as us for united states. To use the JVM platform default locale then use the name default",
            "title" : "Locale"
          },
          "type" : {
            "type" : "string",
            "description" : "Whether to use Csv, Fixed, or KeyValue.",
            "title" : "Type",
            "enum" : [ "Csv", "Fixed", "KeyValue" ]
          },
          "unwrap-single-instance" : {
            "type" : "boolean",
            "description" : "When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a java.util.List.",
            "title" : "Unwrap Single Instance"
          }
        }
      },
      "org.apache.camel.model.dataformat.CBORDataFormat" : {
        "title" : "CBOR",
        "description" : "Unmarshal a CBOR payload to POJO and back.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-jms-type" : {
            "type" : "boolean",
            "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
            "title" : "Allow Jms Type"
          },
          "allow-unmarshall-type" : {
            "type" : "boolean",
            "description" : "If enabled then Jackson CBOR is allowed to attempt to use the CamelCBORUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
            "title" : "Allow Unmarshall Type"
          },
          "collection-type" : {
            "type" : "string",
            "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
            "title" : "Collection Type"
          },
          "disable-features" : {
            "type" : "string",
            "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
            "title" : "Disable Features"
          },
          "enable-features" : {
            "type" : "string",
            "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
            "title" : "Enable Features"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "object-mapper" : {
            "type" : "string",
            "description" : "Lookup and use the existing CBOR ObjectMapper with the given id when using Jackson.",
            "title" : "Object Mapper"
          },
          "pretty-print" : {
            "type" : "boolean",
            "description" : "To enable pretty printing output nicely formatted. Is by default false.",
            "title" : "Pretty Print"
          },
          "unmarshal-type" : {
            "type" : "string",
            "description" : "Class name of the java type to use when unmarshalling",
            "title" : "Unmarshal Type"
          },
          "use-default-object-mapper" : {
            "type" : "boolean",
            "description" : "Whether to lookup and use default Jackson CBOR ObjectMapper from the registry.",
            "title" : "Use Default Object Mapper"
          },
          "use-list" : {
            "type" : "boolean",
            "description" : "To unmarshal to a List of Map or a List of Pojo.",
            "title" : "Use List"
          }
        }
      },
      "org.apache.camel.model.dataformat.CryptoDataFormat" : {
        "title" : "Crypto (Java Cryptographic Extension)",
        "description" : "Encrypt and decrypt messages using Java Cryptography Extension (JCE).",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "algorithm" : {
            "type" : "string",
            "description" : "The JCE algorithm name indicating the cryptographic algorithm that will be used.",
            "title" : "Algorithm"
          },
          "algorithm-parameter-ref" : {
            "type" : "string",
            "description" : "A JCE AlgorithmParameterSpec used to initialize the Cipher. Will lookup the type using the given name as a java.security.spec.AlgorithmParameterSpec type.",
            "title" : "Algorithm Parameter Ref"
          },
          "buffer-size" : {
            "type" : "number",
            "description" : "The size of the buffer used in the signature process.",
            "title" : "Buffer Size",
            "default" : "4096"
          },
          "crypto-provider" : {
            "type" : "string",
            "description" : "The name of the JCE Security Provider that should be used.",
            "title" : "Crypto Provider"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "init-vector-ref" : {
            "type" : "string",
            "description" : "Refers to a byte array containing the Initialization Vector that will be used to initialize the Cipher.",
            "title" : "Init Vector Ref"
          },
          "inline" : {
            "type" : "boolean",
            "description" : "Flag indicating that the configured IV should be inlined into the encrypted data stream. Is by default false.",
            "title" : "Inline"
          },
          "key-ref" : {
            "type" : "string",
            "description" : "Refers to the secret key to lookup from the register to use.",
            "title" : "Key Ref"
          },
          "mac-algorithm" : {
            "type" : "string",
            "description" : "The JCE algorithm name indicating the Message Authentication algorithm.",
            "title" : "Mac Algorithm",
            "default" : "HmacSHA1"
          },
          "should-append-hmac" : {
            "type" : "boolean"
          }
        }
      },
      "org.apache.camel.model.dataformat.CsvDataFormat" : {
        "title" : "CSV",
        "description" : "Handle CSV (Comma Separated Values) payloads.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "allow-missing-column-names" : {
              "type" : "boolean",
              "description" : "Whether to allow missing column names.",
              "title" : "Allow Missing Column Names"
            },
            "capture-header-record" : {
              "type" : "boolean",
              "description" : "Whether the unmarshalling should capture the header record and store it in the message header",
              "title" : "Capture Header Record"
            },
            "comment-marker" : {
              "type" : "string",
              "description" : "Sets the comment marker of the reference format.",
              "title" : "Comment Marker"
            },
            "comment-marker-disabled" : {
              "type" : "boolean",
              "description" : "Disables the comment marker of the reference format.",
              "title" : "Comment Marker Disabled"
            },
            "delimiter" : {
              "type" : "string",
              "description" : "Sets the delimiter to use. The default value is , (comma)",
              "title" : "Delimiter"
            },
            "escape" : {
              "type" : "string",
              "description" : "Sets the escape character to use",
              "title" : "Escape"
            },
            "escape-disabled" : {
              "type" : "boolean",
              "description" : "Use for disabling using escape character",
              "title" : "Escape Disabled"
            },
            "format-name" : {
              "type" : "string",
              "description" : "The name of the format to use, the default value is CSVFormat.DEFAULT",
              "title" : "Format Name",
              "default" : "DEFAULT",
              "enum" : [ "DEFAULT", "EXCEL", "INFORMIX_UNLOAD", "INFORMIX_UNLOAD_CSV", "MYSQL", "RFC4180" ]
            },
            "format-ref" : {
              "type" : "string",
              "description" : "The reference format to use, it will be updated with the other format options, the default value is CSVFormat.DEFAULT",
              "title" : "Format Ref"
            },
            "header" : {
              "type" : "array",
              "description" : "To configure the CSV headers",
              "title" : "Header",
              "items" : {
                "type" : "string"
              }
            },
            "header-disabled" : {
              "type" : "boolean",
              "description" : "Use for disabling headers",
              "title" : "Header Disabled"
            },
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "ignore-empty-lines" : {
              "type" : "boolean",
              "description" : "Whether to ignore empty lines.",
              "title" : "Ignore Empty Lines"
            },
            "ignore-header-case" : {
              "type" : "boolean",
              "description" : "Sets whether or not to ignore case when accessing header names.",
              "title" : "Ignore Header Case"
            },
            "ignore-surrounding-spaces" : {
              "type" : "boolean",
              "description" : "Whether to ignore surrounding spaces",
              "title" : "Ignore Surrounding Spaces"
            },
            "lazy-load" : {
              "type" : "boolean",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one.",
              "title" : "Lazy Load"
            },
            "marshaller-factory-ref" : {
              "type" : "string",
              "description" : "Sets the implementation of the CsvMarshallerFactory interface which is able to customize marshalling/unmarshalling behavior by extending CsvMarshaller or creating it from scratch.",
              "title" : "Marshaller Factory Ref"
            },
            "null-string" : {
              "type" : "string",
              "description" : "Sets the null string",
              "title" : "Null String"
            },
            "null-string-disabled" : {
              "type" : "boolean",
              "description" : "Used to disable null strings",
              "title" : "Null String Disabled"
            },
            "quote" : {
              "type" : "string",
              "description" : "Sets the quote which by default is",
              "title" : "Quote"
            },
            "quote-disabled" : {
              "type" : "boolean",
              "description" : "Used to disable quotes",
              "title" : "Quote Disabled"
            },
            "quote-mode" : {
              "type" : "string",
              "description" : "Sets the quote mode",
              "title" : "Quote Mode",
              "enum" : [ "ALL", "ALL_NON_NULL", "MINIMAL", "NON_NUMERIC", "NONE" ]
            },
            "record-converter-ref" : {
              "type" : "string",
              "description" : "Refers to a custom CsvRecordConverter to lookup from the registry to use.",
              "title" : "Record Converter Ref"
            },
            "record-separator" : {
              "type" : "string",
              "description" : "Sets the record separator (aka new line) which by default is new line characters (CRLF)",
              "title" : "Record Separator"
            },
            "record-separator-disabled" : {
              "type" : "string",
              "description" : "Used for disabling record separator",
              "title" : "Record Separator Disabled"
            },
            "skip-header-record" : {
              "type" : "boolean",
              "description" : "Whether to skip the header record in the output",
              "title" : "Skip Header Record"
            },
            "trailing-delimiter" : {
              "type" : "boolean",
              "description" : "Sets whether or not to add a trailing delimiter.",
              "title" : "Trailing Delimiter"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Sets whether or not to trim leading and trailing blanks.",
              "title" : "Trim"
            },
            "use-maps" : {
              "type" : "boolean",
              "description" : "Whether the unmarshalling should produce maps (HashMap)for the lines values instead of lists. It requires to have header (either defined or collected).",
              "title" : "Use Maps"
            },
            "use-ordered-maps" : {
              "type" : "boolean",
              "description" : "Whether the unmarshalling should produce ordered maps (LinkedHashMap) for the lines values instead of lists. It requires to have header (either defined or collected).",
              "title" : "Use Ordered Maps"
            }
          }
        } ]
      },
      "org.apache.camel.model.dataformat.CustomDataFormat" : {
        "title" : "Custom",
        "description" : "Delegate to a custom org.apache.camel.spi.DataFormat implementation via Camel registry.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "ref" : {
              "type" : "string",
              "description" : "Reference to the custom org.apache.camel.spi.DataFormat to lookup from the Camel registry.",
              "title" : "Ref"
            }
          }
        } ],
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.dataformat.DataFormatsDefinition" : {
        "title" : "Data formats",
        "description" : "Configure data formats.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "asn1" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ASN1DataFormat"
          },
          "avro" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.AvroDataFormat"
          },
          "barcode" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BarcodeDataFormat"
          },
          "base64" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.Base64DataFormat"
          },
          "bindy" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BindyDataFormat"
          },
          "cbor" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CBORDataFormat"
          },
          "crypto" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CryptoDataFormat"
          },
          "csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CsvDataFormat"
          },
          "custom" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CustomDataFormat"
          },
          "fhir-json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirJsonDataFormat"
          },
          "fhir-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirXmlDataFormat"
          },
          "flatpack" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FlatpackDataFormat"
          },
          "grok" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GrokDataFormat"
          },
          "gzip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GzipDeflaterDataFormat"
          },
          "hl7" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.HL7DataFormat"
          },
          "ical" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.IcalDataFormat"
          },
          "jackson-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JacksonXMLDataFormat"
          },
          "jaxb" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JaxbDataFormat"
          },
          "json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonDataFormat"
          },
          "json-api" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonApiDataFormat"
          },
          "lzf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.LZFDataFormat"
          },
          "mime-multipart" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.MimeMultipartDataFormat"
          },
          "pgp" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.PGPDataFormat"
          },
          "protobuf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ProtobufDataFormat"
          },
          "rss" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.RssDataFormat"
          },
          "soap" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SoapDataFormat"
          },
          "swift-mt" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMtDataFormat"
          },
          "swift-mx" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMxDataFormat"
          },
          "syslog" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SyslogDataFormat"
          },
          "tar-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TarFileDataFormat"
          },
          "thrift" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ThriftDataFormat"
          },
          "tidy-markup" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TidyMarkupDataFormat"
          },
          "univocity-csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityCsvDataFormat"
          },
          "univocity-fixed" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityFixedDataFormat"
          },
          "univocity-tsv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityTsvDataFormat"
          },
          "xml-security" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.XMLSecurityDataFormat"
          },
          "yaml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.YAMLDataFormat"
          },
          "zip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipDeflaterDataFormat"
          },
          "zip-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipFileDataFormat"
          }
        }
      },
      "org.apache.camel.model.dataformat.FhirJsonDataFormat" : {
        "title" : "FHIR JSon",
        "description" : "Marshall and unmarshall FHIR objects to/from JSON.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "content-type-header" : {
            "type" : "boolean",
            "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
            "title" : "Content Type Header"
          },
          "dont-encode-elements" : {
            "type" : "string",
            "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
            "title" : "Dont Encode Elements"
          },
          "dont-strip-versions-from-references-at-paths" : {
            "type" : "string",
            "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
            "title" : "Dont Strip Versions From References At Paths"
          },
          "encode-elements" : {
            "type" : "string",
            "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
            "title" : "Encode Elements"
          },
          "encode-elements-applies-to-child-resources-only" : {
            "type" : "boolean",
            "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
            "title" : "Encode Elements Applies To Child Resources Only"
          },
          "fhir-context" : {
            "type" : "string",
            "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
            "title" : "Fhir Context"
          },
          "fhir-version" : {
            "type" : "string",
            "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
            "title" : "Fhir Version",
            "default" : "R4",
            "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ]
          },
          "force-resource-id" : {
            "type" : "string",
            "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
            "title" : "Force Resource Id"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "omit-resource-id" : {
            "type" : "boolean",
            "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
            "title" : "Omit Resource Id"
          },
          "override-resource-id-with-bundle-entry-full-url" : {
            "type" : "boolean",
            "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
            "title" : "Override Resource Id With Bundle Entry Full Url"
          },
          "parser-error-handler" : {
            "type" : "string",
            "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
            "title" : "Parser Error Handler"
          },
          "parser-options" : {
            "type" : "string",
            "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
            "title" : "Parser Options"
          },
          "prefer-types" : {
            "type" : "string",
            "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
            "title" : "Prefer Types"
          },
          "pretty-print" : {
            "type" : "boolean",
            "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
            "title" : "Pretty Print"
          },
          "server-base-url" : {
            "type" : "string",
            "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
            "title" : "Server Base Url"
          },
          "strip-versions-from-references" : {
            "type" : "boolean",
            "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
            "title" : "Strip Versions From References"
          },
          "summary-mode" : {
            "type" : "boolean",
            "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
            "title" : "Summary Mode"
          },
          "suppress-narratives" : {
            "type" : "boolean",
            "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
            "title" : "Suppress Narratives"
          }
        }
      },
      "org.apache.camel.model.dataformat.FhirXmlDataFormat" : {
        "title" : "FHIR XML",
        "description" : "Marshall and unmarshall FHIR objects to/from XML.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "content-type-header" : {
            "type" : "boolean",
            "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
            "title" : "Content Type Header"
          },
          "dont-encode-elements" : {
            "type" : "string",
            "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
            "title" : "Dont Encode Elements"
          },
          "dont-strip-versions-from-references-at-paths" : {
            "type" : "string",
            "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
            "title" : "Dont Strip Versions From References At Paths"
          },
          "encode-elements" : {
            "type" : "string",
            "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
            "title" : "Encode Elements"
          },
          "encode-elements-applies-to-child-resources-only" : {
            "type" : "boolean",
            "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
            "title" : "Encode Elements Applies To Child Resources Only"
          },
          "fhir-context" : {
            "type" : "string",
            "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
            "title" : "Fhir Context"
          },
          "fhir-version" : {
            "type" : "string",
            "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
            "title" : "Fhir Version",
            "default" : "R4",
            "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ]
          },
          "force-resource-id" : {
            "type" : "string",
            "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
            "title" : "Force Resource Id"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "omit-resource-id" : {
            "type" : "boolean",
            "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
            "title" : "Omit Resource Id"
          },
          "override-resource-id-with-bundle-entry-full-url" : {
            "type" : "boolean",
            "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
            "title" : "Override Resource Id With Bundle Entry Full Url"
          },
          "parser-error-handler" : {
            "type" : "string",
            "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
            "title" : "Parser Error Handler"
          },
          "parser-options" : {
            "type" : "string",
            "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
            "title" : "Parser Options"
          },
          "prefer-types" : {
            "type" : "string",
            "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
            "title" : "Prefer Types"
          },
          "pretty-print" : {
            "type" : "boolean",
            "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
            "title" : "Pretty Print"
          },
          "server-base-url" : {
            "type" : "string",
            "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
            "title" : "Server Base Url"
          },
          "strip-versions-from-references" : {
            "type" : "boolean",
            "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
            "title" : "Strip Versions From References"
          },
          "summary-mode" : {
            "type" : "boolean",
            "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
            "title" : "Summary Mode"
          },
          "suppress-narratives" : {
            "type" : "boolean",
            "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
            "title" : "Suppress Narratives"
          }
        }
      },
      "org.apache.camel.model.dataformat.FlatpackDataFormat" : {
        "title" : "Flatpack",
        "description" : "Marshal and unmarshal Java lists and maps to/from flat files (such as CSV, delimited, or fixed length formats) using Flatpack library.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-short-lines" : {
            "type" : "boolean",
            "description" : "Allows for lines to be shorter than expected and ignores the extra characters",
            "title" : "Allow Short Lines"
          },
          "definition" : {
            "type" : "string",
            "description" : "The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap.",
            "title" : "Definition"
          },
          "delimiter" : {
            "type" : "string",
            "description" : "The delimiter char (could be ; , or similar)",
            "title" : "Delimiter",
            "default" : ","
          },
          "fixed" : {
            "type" : "boolean",
            "description" : "Delimited or fixed. Is by default false = delimited",
            "title" : "Fixed"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "ignore-extra-columns" : {
            "type" : "boolean",
            "description" : "Allows for lines to be longer than expected and ignores the extra characters.",
            "title" : "Ignore Extra Columns"
          },
          "ignore-first-record" : {
            "type" : "boolean",
            "description" : "Whether the first line is ignored for delimited files (for the column headers). Is by default true.",
            "title" : "Ignore First Record"
          },
          "parser-factory-ref" : {
            "type" : "string",
            "description" : "References to a custom parser factory to lookup in the registry",
            "title" : "Parser Factory Ref"
          },
          "text-qualifier" : {
            "type" : "string",
            "description" : "If the text is qualified with a character. Uses quote character by default.",
            "title" : "Text Qualifier"
          }
        }
      },
      "org.apache.camel.model.dataformat.GrokDataFormat" : {
        "title" : "Grok",
        "description" : "Unmarshal unstructured data to objects using Logstash based Grok patterns.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-multiple-matches-per-line" : {
            "type" : "boolean",
            "description" : "If false, every line of input is matched for pattern only once. Otherwise the line can be scanned multiple times when non-terminal pattern is used.",
            "title" : "Allow Multiple Matches Per Line"
          },
          "flattened" : {
            "type" : "boolean",
            "description" : "Turns on flattened mode. In flattened mode the exception is thrown when there are multiple pattern matches with same key.",
            "title" : "Flattened"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "named-only" : {
            "type" : "boolean",
            "description" : "Whether to capture named expressions only or not (i.e. %{IP:ip} but not ${IP})",
            "title" : "Named Only"
          },
          "pattern" : {
            "type" : "string",
            "description" : "The grok pattern to match lines of input",
            "title" : "Pattern"
          }
        },
        "required" : [ "pattern" ]
      },
      "org.apache.camel.model.dataformat.GzipDeflaterDataFormat" : {
        "title" : "GZip Deflater",
        "description" : "Compress and decompress messages using java.util.zip.GZIPStream.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.dataformat.HL7DataFormat" : {
        "title" : "HL7",
        "description" : "Marshal and unmarshal HL7 (Health Care) model objects using the HL7 MLLP codec.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "validate" : {
            "type" : "boolean",
            "description" : "Whether to validate the HL7 message Is by default true.",
            "title" : "Validate"
          }
        }
      },
      "org.apache.camel.model.dataformat.IcalDataFormat" : {
        "title" : "iCal",
        "description" : "Marshal and unmarshal iCal (.ics) documents to/from model objects.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "validating" : {
            "type" : "boolean",
            "description" : "Whether to validate.",
            "title" : "Validating"
          }
        }
      },
      "org.apache.camel.model.dataformat.JacksonXMLDataFormat" : {
        "title" : "Jackson XML",
        "description" : "Unmarshal an XML payloads to POJOs and back using XMLMapper extension of Jackson.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-jms-type" : {
            "type" : "boolean",
            "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
            "title" : "Allow Jms Type"
          },
          "allow-unmarshall-type" : {
            "type" : "boolean",
            "description" : "If enabled then Jackson is allowed to attempt to use the CamelJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
            "title" : "Allow Unmarshall Type"
          },
          "collection-type" : {
            "type" : "string",
            "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
            "title" : "Collection Type"
          },
          "content-type-header" : {
            "type" : "boolean",
            "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
            "title" : "Content Type Header"
          },
          "disable-features" : {
            "type" : "string",
            "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
            "title" : "Disable Features"
          },
          "enable-features" : {
            "type" : "string",
            "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
            "title" : "Enable Features"
          },
          "enable-jaxb-annotation-module" : {
            "type" : "boolean",
            "description" : "Whether to enable the JAXB annotations module when using jackson. When enabled then JAXB annotations can be used by Jackson.",
            "title" : "Enable Jaxb Annotation Module"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "include" : {
            "type" : "string",
            "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
            "title" : "Include"
          },
          "json-view" : {
            "type" : "string",
            "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
            "title" : "Json View"
          },
          "module-class-names" : {
            "type" : "string",
            "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
            "title" : "Module Class Names"
          },
          "module-refs" : {
            "type" : "string",
            "description" : "To use custom Jackson modules referred from the Camel registry. Multiple modules can be separated by comma.",
            "title" : "Module Refs"
          },
          "pretty-print" : {
            "type" : "boolean",
            "description" : "To enable pretty printing output nicely formatted. Is by default false.",
            "title" : "Pretty Print"
          },
          "timezone" : {
            "type" : "string",
            "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
            "title" : "Timezone"
          },
          "unmarshal-type" : {
            "type" : "string",
            "description" : "Class name of the java type to use when unmarshalling",
            "title" : "Unmarshal Type"
          },
          "use-list" : {
            "type" : "boolean",
            "description" : "To unmarshal to a List of Map or a List of Pojo.",
            "title" : "Use List"
          },
          "xml-mapper" : {
            "type" : "string",
            "description" : "Lookup and use the existing XmlMapper with the given id.",
            "title" : "Xml Mapper"
          }
        }
      },
      "org.apache.camel.model.dataformat.JaxbDataFormat" : {
        "title" : "JAXB",
        "description" : "Unmarshal XML payloads to POJOs and back using JAXB2 XML marshalling standard.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "access-external-schema-protocols" : {
            "type" : "string",
            "description" : "Only in use if schema validation has been enabled. Restrict access to the protocols specified for external reference set by the schemaLocation attribute, Import and Include element. Examples of protocols are file, http, jar:file. false or none to deny all access to external references; a specific protocol, such as file, to give permission to only the protocol; the keyword all to grant permission to all protocols.",
            "title" : "Access External Schema Protocols",
            "default" : "false"
          },
          "content-type-header" : {
            "type" : "boolean",
            "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
            "title" : "Content Type Header"
          },
          "context-path" : {
            "type" : "string",
            "description" : "Package name where your JAXB classes are located.",
            "title" : "Context Path"
          },
          "context-path-is-class-name" : {
            "type" : "boolean",
            "description" : "This can be set to true to mark that the contextPath is referring to a classname and not a package name.",
            "title" : "Context Path Is Class Name"
          },
          "encoding" : {
            "type" : "string",
            "description" : "To overrule and use a specific encoding",
            "title" : "Encoding"
          },
          "filter-non-xml-chars" : {
            "type" : "boolean",
            "description" : "To ignore non xml characheters and replace them with an empty space.",
            "title" : "Filter Non Xml Chars"
          },
          "fragment" : {
            "type" : "boolean",
            "description" : "To turn on marshalling XML fragment trees. By default JAXB looks for XmlRootElement annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have XmlRootElement annotation, sometimes you need unmarshall only part of tree. In that case you can use partial unmarshalling. To enable this behaviours you need set property partClass. Camel will pass this class to JAXB's unmarshaler.",
            "title" : "Fragment"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "ignore-jaxb-element" : {
            "type" : "boolean"
          },
          "jaxb-provider-properties" : {
            "type" : "string",
            "description" : "Refers to a custom java.util.Map to lookup in the registry containing custom JAXB provider properties to be used with the JAXB marshaller.",
            "title" : "Jaxb Provider Properties"
          },
          "must-be-jaxb-element" : {
            "type" : "boolean"
          },
          "namespace-prefix-ref" : {
            "type" : "string",
            "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Camel allows you to refer to a map which contains the desired mapping.",
            "title" : "Namespace Prefix Ref"
          },
          "no-namespace-schema-location" : {
            "type" : "string",
            "description" : "To define the location of the namespaceless schema",
            "title" : "No Namespace Schema Location"
          },
          "object-factory" : {
            "type" : "boolean",
            "description" : "Whether to allow using ObjectFactory classes to create the POJO classes during marshalling. This only applies to POJO classes that has not been annotated with JAXB and providing jaxb.index descriptor files.",
            "title" : "Object Factory"
          },
          "part-class" : {
            "type" : "string",
            "description" : "Name of class used for fragment parsing. See more details at the fragment option.",
            "title" : "Part Class"
          },
          "part-namespace" : {
            "type" : "string",
            "description" : "XML namespace to use for fragment parsing. See more details at the fragment option.",
            "title" : "Part Namespace"
          },
          "pretty-print" : {
            "type" : "boolean",
            "description" : "To enable pretty printing output nicely formatted. Is by default false.",
            "title" : "Pretty Print"
          },
          "schema" : {
            "type" : "string",
            "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
            "title" : "Schema"
          },
          "schema-location" : {
            "type" : "string",
            "description" : "To define the location of the schema",
            "title" : "Schema Location"
          },
          "schema-severity-level" : {
            "type" : "string",
            "description" : "Sets the schema severity level to use when validating against a schema. This level determines the minimum severity error that triggers JAXB to stop continue parsing. The default value of 0 (warning) means that any error (warning, error or fatal error) will trigger JAXB to stop. There are the following three levels: 0=warning, 1=error, 2=fatal error.",
            "title" : "Schema Severity Level",
            "default" : "0",
            "enum" : [ "0", "1", "2" ]
          },
          "xml-stream-writer-wrapper" : {
            "type" : "string",
            "description" : "To use a custom xml stream writer.",
            "title" : "Xml Stream Writer Wrapper"
          }
        },
        "required" : [ "context-path" ]
      },
      "org.apache.camel.model.dataformat.JsonApiDataFormat" : {
        "title" : "JSonApi",
        "description" : "Marshal and unmarshal JSON:API resources using JSONAPI-Converter library.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "data-format-types" : {
            "type" : "string",
            "description" : "The classes to take into account for the marshalling. Multiple classes can be separated by comma.",
            "title" : "Data Format Types"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "main-format-type" : {
            "type" : "string",
            "description" : "The class to take into account while unmarshalling.",
            "title" : "Main Format Type"
          }
        }
      },
      "org.apache.camel.model.dataformat.JsonDataFormat" : {
        "title" : "JSon",
        "description" : "Marshal POJOs to JSON and back.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-jms-type" : {
            "type" : "boolean",
            "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
            "title" : "Allow Jms Type"
          },
          "allow-unmarshall-type" : {
            "type" : "boolean",
            "description" : "If enabled then Jackson is allowed to attempt to use the CamelJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
            "title" : "Allow Unmarshall Type"
          },
          "auto-discover-object-mapper" : {
            "type" : "boolean",
            "description" : "If set to true then Jackson will look for an objectMapper to use from the registry",
            "title" : "Auto Discover Object Mapper"
          },
          "auto-discover-schema-resolver" : {
            "type" : "boolean",
            "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
            "title" : "Auto Discover Schema Resolver"
          },
          "collection-type" : {
            "type" : "string",
            "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows using different collection types than java.util.Collection based as default.",
            "title" : "Collection Type"
          },
          "content-type-header" : {
            "type" : "boolean",
            "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
            "title" : "Content Type Header"
          },
          "date-format-pattern" : {
            "type" : "string",
            "description" : "To configure the date format while marshall or unmarshall Date fields in JSON using Gson",
            "title" : "Date Format Pattern"
          },
          "disable-features" : {
            "type" : "string",
            "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
            "title" : "Disable Features"
          },
          "enable-features" : {
            "type" : "string",
            "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
            "title" : "Enable Features"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "include" : {
            "type" : "string",
            "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
            "title" : "Include"
          },
          "json-view" : {
            "type" : "string",
            "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
            "title" : "Json View"
          },
          "library" : {
            "type" : "string",
            "description" : "Which json library to use.",
            "title" : "Library",
            "default" : "Jackson",
            "enum" : [ "Fastjson", "Gson", "Jackson", "Johnzon", "Jsonb" ]
          },
          "module-class-names" : {
            "type" : "string",
            "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
            "title" : "Module Class Names"
          },
          "module-refs" : {
            "type" : "string",
            "description" : "To use custom Jackson modules referred from the Camel registry. Multiple modules can be separated by comma.",
            "title" : "Module Refs"
          },
          "naming-strategy" : {
            "type" : "string",
            "description" : "If set then Jackson will use the the defined Property Naming Strategy.Possible values are: LOWER_CAMEL_CASE, LOWER_DOT_CASE, LOWER_CASE, KEBAB_CASE, SNAKE_CASE and UPPER_CAMEL_CASE",
            "title" : "Naming Strategy"
          },
          "object-mapper" : {
            "type" : "string",
            "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
            "title" : "Object Mapper"
          },
          "pretty-print" : {
            "type" : "boolean",
            "description" : "To enable pretty printing output nicely formatted. Is by default false.",
            "title" : "Pretty Print"
          },
          "schema-resolver" : {
            "type" : "string",
            "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
            "title" : "Schema Resolver"
          },
          "timezone" : {
            "type" : "string",
            "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling. This option will have no effect on the others Json DataFormat, like gson and fastjson.",
            "title" : "Timezone"
          },
          "unmarshal-type" : {
            "type" : "string",
            "description" : "Class name of the java type to use when unmarshalling",
            "title" : "Unmarshal Type"
          },
          "use-default-object-mapper" : {
            "type" : "boolean",
            "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
            "title" : "Use Default Object Mapper"
          },
          "use-list" : {
            "type" : "boolean",
            "description" : "To unmarshal to a List of Map or a List of Pojo.",
            "title" : "Use List"
          }
        }
      },
      "org.apache.camel.model.dataformat.LZFDataFormat" : {
        "title" : "LZF Deflate Compression",
        "description" : "Compress and decompress streams using LZF deflate algorithm.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "using-parallel-compression" : {
            "type" : "boolean",
            "description" : "Enable encoding (compress) using multiple processing cores.",
            "title" : "Using Parallel Compression"
          }
        }
      },
      "org.apache.camel.model.dataformat.MimeMultipartDataFormat" : {
        "title" : "MIME Multipart",
        "description" : "Marshal Camel messages with attachments into MIME-Multipart messages and back.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "binary-content" : {
            "type" : "boolean",
            "description" : "Defines whether the content of binary parts in the MIME multipart is binary (true) or Base-64 encoded (false) Default is false.",
            "title" : "Binary Content"
          },
          "headers-inline" : {
            "type" : "boolean",
            "description" : "Defines whether the MIME-Multipart headers are part of the message body (true) or are set as Camel headers (false). Default is false.",
            "title" : "Headers Inline"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "include-headers" : {
            "type" : "string",
            "description" : "A regex that defines which Camel headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true. Default is to include no headers",
            "title" : "Include Headers"
          },
          "multipart-sub-type" : {
            "type" : "string",
            "description" : "Specify the subtype of the MIME Multipart. Default is mixed.",
            "title" : "Multipart Sub Type",
            "default" : "mixed"
          },
          "multipart-without-attachment" : {
            "type" : "boolean",
            "description" : "Defines whether a message without attachment is also marshaled into a MIME Multipart (with only one body part). Default is false.",
            "title" : "Multipart Without Attachment"
          }
        }
      },
      "org.apache.camel.model.dataformat.PGPDataFormat" : {
        "title" : "PGP",
        "description" : "Encrypt and decrypt messages using Java Cryptographic Extension (JCE) and PGP.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "algorithm" : {
            "type" : "number",
            "description" : "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting.",
            "title" : "Algorithm"
          },
          "armored" : {
            "type" : "boolean",
            "description" : "This option will cause PGP to base64 encode the encrypted text, making it available for copy/paste, etc.",
            "title" : "Armored"
          },
          "compression-algorithm" : {
            "type" : "number",
            "description" : "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting.",
            "title" : "Compression Algorithm"
          },
          "hash-algorithm" : {
            "type" : "number",
            "description" : "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing.",
            "title" : "Hash Algorithm"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "integrity" : {
            "type" : "boolean",
            "description" : "Adds an integrity check/sign into the encryption file. The default value is true.",
            "title" : "Integrity"
          },
          "key-file-name" : {
            "type" : "string",
            "description" : "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
            "title" : "Key File Name"
          },
          "key-userid" : {
            "type" : "string",
            "description" : "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID.",
            "title" : "Key Userid"
          },
          "password" : {
            "type" : "string",
            "description" : "Password used when opening the private key (not used for encryption).",
            "title" : "Password"
          },
          "provider" : {
            "type" : "string",
            "description" : "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work.",
            "title" : "Provider"
          },
          "signature-key-file-name" : {
            "type" : "string",
            "description" : "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
            "title" : "Signature Key File Name"
          },
          "signature-key-ring" : {
            "type" : "string",
            "description" : "Keyring used for signing/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time.",
            "title" : "Signature Key Ring"
          },
          "signature-key-userid" : {
            "type" : "string",
            "description" : "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID.",
            "title" : "Signature Key Userid"
          },
          "signature-password" : {
            "type" : "string",
            "description" : "Password used when opening the private key used for signing (during encryption).",
            "title" : "Signature Password"
          },
          "signature-verification-option" : {
            "type" : "string",
            "description" : "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown.",
            "title" : "Signature Verification Option"
          }
        }
      },
      "org.apache.camel.model.dataformat.ParquetAvroDataFormat" : {
        "title" : "Parquet File",
        "description" : "Parquet Avro serialization and de-serialization.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "compression-codec-name" : {
              "type" : "string",
              "description" : "Compression codec to use when marshalling.",
              "title" : "Compression Codec Name",
              "default" : "GZIP"
            },
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "unmarshal-type" : {
              "type" : "string",
              "description" : "Class to use when (un)marshalling. If omitted, parquet files are converted into Avro's GenericRecords for unmarshalling and input objects are assumed as GenericRecords for marshalling.",
              "title" : "Unmarshal Type"
            }
          }
        } ]
      },
      "org.apache.camel.model.dataformat.ProtobufDataFormat" : {
        "title" : "Protobuf",
        "description" : "Serialize and deserialize Java objects using Google's Protocol buffers.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "allow-jms-type" : {
              "type" : "boolean",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "title" : "Allow Jms Type"
            },
            "allow-unmarshall-type" : {
              "type" : "boolean",
              "description" : "If enabled then Jackson is allowed to attempt to use the CamelJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "title" : "Allow Unmarshall Type"
            },
            "auto-discover-object-mapper" : {
              "type" : "boolean",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "title" : "Auto Discover Object Mapper"
            },
            "auto-discover-schema-resolver" : {
              "type" : "boolean",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "title" : "Auto Discover Schema Resolver"
            },
            "collection-type" : {
              "type" : "string",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "title" : "Collection Type"
            },
            "content-type-format" : {
              "type" : "string",
              "description" : "Defines a content type format in which protobuf message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native protobuf or json fields representation. The default value is native.",
              "title" : "Content Type Format",
              "default" : "native",
              "enum" : [ "native", "json" ]
            },
            "content-type-header" : {
              "type" : "boolean",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "title" : "Content Type Header"
            },
            "disable-features" : {
              "type" : "string",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "title" : "Disable Features"
            },
            "enable-features" : {
              "type" : "string",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "title" : "Enable Features"
            },
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "include" : {
              "type" : "string",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "title" : "Include"
            },
            "instance-class" : {
              "type" : "string",
              "description" : "Name of class to use when unmarshalling",
              "title" : "Instance Class"
            },
            "json-view" : {
              "type" : "string",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "title" : "Json View"
            },
            "library" : {
              "type" : "string",
              "description" : "Which Protobuf library to use.",
              "title" : "Library",
              "default" : "GoogleProtobuf",
              "enum" : [ "GoogleProtobuf", "Jackson" ]
            },
            "module-class-names" : {
              "type" : "string",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "title" : "Module Class Names"
            },
            "module-refs" : {
              "type" : "string",
              "description" : "To use custom Jackson modules referred from the Camel registry. Multiple modules can be separated by comma.",
              "title" : "Module Refs"
            },
            "object-mapper" : {
              "type" : "string",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "title" : "Object Mapper"
            },
            "schema-resolver" : {
              "type" : "string",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "title" : "Schema Resolver"
            },
            "timezone" : {
              "type" : "string",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "title" : "Timezone"
            },
            "unmarshal-type" : {
              "type" : "string",
              "description" : "Class name of the java type to use when unmarshalling",
              "title" : "Unmarshal Type"
            },
            "use-default-object-mapper" : {
              "type" : "boolean",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "title" : "Use Default Object Mapper"
            },
            "use-list" : {
              "type" : "boolean",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "title" : "Use List"
            }
          }
        } ]
      },
      "org.apache.camel.model.dataformat.RssDataFormat" : {
        "title" : "RSS",
        "description" : "Transform from ROME SyndFeed Java Objects to XML and vice-versa.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.dataformat.SoapDataFormat" : {
        "title" : "SOAP",
        "description" : "Marshal Java objects to SOAP messages and back.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "context-path" : {
              "type" : "string",
              "description" : "Package name where your JAXB classes are located.",
              "title" : "Context Path"
            },
            "element-name-strategy-ref" : {
              "type" : "string",
              "description" : "Refers to an element strategy to lookup from the registry. An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name. The following three element strategy class name is provided out of the box. QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported TypeNameStrategy - Uses the name and namespace from the XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault All three classes is located in the package name org.apache.camel.dataformat.soap.name If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.",
              "title" : "Element Name Strategy Ref"
            },
            "encoding" : {
              "type" : "string",
              "description" : "To overrule and use a specific encoding",
              "title" : "Encoding"
            },
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "namespace-prefix-ref" : {
              "type" : "string",
              "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Camel allows you to refer to a map which contains the desired mapping.",
              "title" : "Namespace Prefix Ref"
            },
            "schema" : {
              "type" : "string",
              "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
              "title" : "Schema"
            },
            "version" : {
              "type" : "string",
              "description" : "SOAP version should either be 1.1 or 1.2. Is by default 1.1",
              "title" : "Version",
              "default" : "1.1",
              "enum" : [ "1.1", "1.2" ]
            }
          }
        } ],
        "required" : [ "context-path" ]
      },
      "org.apache.camel.model.dataformat.SwiftMtDataFormat" : {
        "title" : "SWIFT MT",
        "description" : "Encode and decode SWIFT MT messages.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "write-in-json" : {
              "type" : "boolean",
              "description" : "The flag indicating that messages must be marshalled in a JSON format.",
              "title" : "Write In Json"
            }
          }
        } ]
      },
      "org.apache.camel.model.dataformat.SwiftMxDataFormat" : {
        "title" : "SWIFT MX",
        "description" : "Encode and decode SWIFT MX messages.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "read-config-ref" : {
            "type" : "string",
            "description" : "Refers to a specific configuration to use when unmarshalling an input stream to lookup from the registry.",
            "title" : "Read Config Ref"
          },
          "read-message-id" : {
            "type" : "string",
            "description" : "The type of MX message to produce when unmarshalling an input stream. If not set, it will be automatically detected from the namespace used.",
            "title" : "Read Message Id"
          },
          "write-config-ref" : {
            "type" : "string",
            "description" : "Refers to a specific configuration to use when marshalling a message to lookup from the registry.",
            "title" : "Write Config Ref"
          },
          "write-in-json" : {
            "type" : "boolean",
            "description" : "The flag indicating that messages must be marshalled in a JSON format.",
            "title" : "Write In Json"
          }
        }
      },
      "org.apache.camel.model.dataformat.SyslogDataFormat" : {
        "title" : "Syslog",
        "description" : "Marshall SyslogMessages to RFC3164 and RFC5424 messages and back.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.dataformat.TarFileDataFormat" : {
        "title" : "Tar File",
        "description" : "Archive files into tarballs or extract files from tarballs.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-empty-directory" : {
            "type" : "boolean",
            "description" : "If the tar file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
            "title" : "Allow Empty Directory"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "max-decompressed-size" : {
            "type" : "number",
            "description" : "Set the maximum decompressed size of a tar file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
            "title" : "Max Decompressed Size",
            "default" : "1073741824"
          },
          "preserve-path-elements" : {
            "type" : "boolean",
            "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the tar file.",
            "title" : "Preserve Path Elements"
          },
          "using-iterator" : {
            "type" : "boolean",
            "description" : "If the tar file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
            "title" : "Using Iterator"
          }
        }
      },
      "org.apache.camel.model.dataformat.ThriftDataFormat" : {
        "title" : "Thrift",
        "description" : "Serialize and deserialize messages using Apache Thrift binary data format.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "content-type-format" : {
              "type" : "string",
              "description" : "Defines a content type format in which thrift message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native binary thrift, json or simple json fields representation. The default value is binary.",
              "title" : "Content Type Format",
              "default" : "binary",
              "enum" : [ "binary", "json", "sjson" ]
            },
            "content-type-header" : {
              "type" : "boolean",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "title" : "Content Type Header"
            },
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "instance-class" : {
              "type" : "string",
              "description" : "Name of class to use when unmarshalling",
              "title" : "Instance Class"
            }
          }
        } ]
      },
      "org.apache.camel.model.dataformat.TidyMarkupDataFormat" : {
        "title" : "TidyMarkup",
        "description" : "Parse (potentially invalid) HTML into valid HTML or DOM.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "data-object-type" : {
            "type" : "string",
            "description" : "What data type to unmarshal as, can either be org.w3c.dom.Node or java.lang.String. Is by default org.w3c.dom.Node",
            "title" : "Data Object Type",
            "default" : "org.w3c.dom.Node",
            "enum" : [ "org.w3c.dom.Node", "java.lang.String" ]
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "omit-xml-declaration" : {
            "type" : "boolean",
            "description" : "When returning a String, do we omit the XML declaration in the top.",
            "title" : "Omit Xml Declaration"
          }
        }
      },
      "org.apache.camel.model.dataformat.UniVocityCsvDataFormat" : {
        "title" : "uniVocity CSV",
        "description" : "Marshal and unmarshal Java objects from and to CSV (Comma Separated Values) using UniVocity Parsers.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "as-map" : {
            "type" : "boolean",
            "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
            "title" : "As Map"
          },
          "comment" : {
            "type" : "string",
            "description" : "The comment symbol. The default value is #",
            "title" : "Comment",
            "default" : "#"
          },
          "delimiter" : {
            "type" : "string",
            "description" : "The delimiter of values",
            "title" : "Delimiter",
            "default" : ","
          },
          "empty-value" : {
            "type" : "string",
            "description" : "The String representation of an empty value",
            "title" : "Empty Value"
          },
          "header-extraction-enabled" : {
            "type" : "boolean",
            "description" : "Whether or not the header must be read in the first line of the test document The default value is false",
            "title" : "Header Extraction Enabled"
          },
          "headers-disabled" : {
            "type" : "boolean",
            "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
            "title" : "Headers Disabled"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "ignore-leading-whitespaces" : {
            "type" : "boolean",
            "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
            "title" : "Ignore Leading Whitespaces"
          },
          "ignore-trailing-whitespaces" : {
            "type" : "boolean",
            "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
            "title" : "Ignore Trailing Whitespaces"
          },
          "lazy-load" : {
            "type" : "boolean",
            "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one. The default value is false",
            "title" : "Lazy Load"
          },
          "line-separator" : {
            "type" : "string",
            "description" : "The line separator of the files The default value is to use the JVM platform line separator",
            "title" : "Line Separator"
          },
          "normalized-line-separator" : {
            "type" : "string",
            "description" : "The normalized line separator of the files The default value is a new line character.",
            "title" : "Normalized Line Separator",
            "default" : "\\n"
          },
          "null-value" : {
            "type" : "string",
            "description" : "The string representation of a null value. The default value is null",
            "title" : "Null Value"
          },
          "number-of-records-to-read" : {
            "type" : "number",
            "description" : "The maximum number of record to read.",
            "title" : "Number Of Records To Read"
          },
          "quote" : {
            "type" : "string",
            "description" : "The quote symbol.",
            "title" : "Quote",
            "default" : "\""
          },
          "quote-all-fields" : {
            "type" : "boolean",
            "description" : "Whether or not all values must be quoted when writing them.",
            "title" : "Quote All Fields"
          },
          "quote-escape" : {
            "type" : "string",
            "description" : "The quote escape symbol",
            "title" : "Quote Escape",
            "default" : "\""
          },
          "skip-empty-lines" : {
            "type" : "boolean",
            "description" : "Whether or not the empty lines must be ignored. The default value is true",
            "title" : "Skip Empty Lines"
          },
          "univocity-header" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityHeader"
            }
          }
        }
      },
      "org.apache.camel.model.dataformat.UniVocityFixedDataFormat" : {
        "title" : "uniVocity Fixed Length",
        "description" : "Marshal and unmarshal Java objects from and to fixed length records using UniVocity Parsers.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "as-map" : {
            "type" : "boolean",
            "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
            "title" : "As Map"
          },
          "comment" : {
            "type" : "string",
            "description" : "The comment symbol. The default value is #",
            "title" : "Comment",
            "default" : "#"
          },
          "empty-value" : {
            "type" : "string",
            "description" : "The String representation of an empty value",
            "title" : "Empty Value"
          },
          "header-extraction-enabled" : {
            "type" : "boolean",
            "description" : "Whether or not the header must be read in the first line of the test document The default value is false",
            "title" : "Header Extraction Enabled"
          },
          "headers-disabled" : {
            "type" : "boolean",
            "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
            "title" : "Headers Disabled"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "ignore-leading-whitespaces" : {
            "type" : "boolean",
            "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
            "title" : "Ignore Leading Whitespaces"
          },
          "ignore-trailing-whitespaces" : {
            "type" : "boolean",
            "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
            "title" : "Ignore Trailing Whitespaces"
          },
          "lazy-load" : {
            "type" : "boolean",
            "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one. The default value is false",
            "title" : "Lazy Load"
          },
          "line-separator" : {
            "type" : "string",
            "description" : "The line separator of the files The default value is to use the JVM platform line separator",
            "title" : "Line Separator"
          },
          "normalized-line-separator" : {
            "type" : "string",
            "description" : "The normalized line separator of the files The default value is a new line character.",
            "title" : "Normalized Line Separator",
            "default" : "\\n"
          },
          "null-value" : {
            "type" : "string",
            "description" : "The string representation of a null value. The default value is null",
            "title" : "Null Value"
          },
          "number-of-records-to-read" : {
            "type" : "number",
            "description" : "The maximum number of record to read.",
            "title" : "Number Of Records To Read"
          },
          "padding" : {
            "type" : "string",
            "description" : "The padding character. The default value is a space",
            "title" : "Padding"
          },
          "record-ends-on-newline" : {
            "type" : "boolean",
            "description" : "Whether or not the record ends on new line. The default value is false",
            "title" : "Record Ends On Newline"
          },
          "skip-empty-lines" : {
            "type" : "boolean",
            "description" : "Whether or not the empty lines must be ignored. The default value is true",
            "title" : "Skip Empty Lines"
          },
          "skip-trailing-chars-until-newline" : {
            "type" : "boolean",
            "description" : "Whether or not the trailing characters until new line must be ignored. The default value is false",
            "title" : "Skip Trailing Chars Until Newline"
          },
          "univocity-header" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityHeader"
            }
          }
        }
      },
      "org.apache.camel.model.dataformat.UniVocityHeader" : {
        "title" : "uniVocity Header",
        "description" : "To configure headers for UniVocity data formats.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "length" : {
            "type" : "string",
            "description" : "Header length",
            "title" : "Length"
          },
          "name" : {
            "type" : "string",
            "description" : "Header name",
            "title" : "Name"
          }
        }
      },
      "org.apache.camel.model.dataformat.UniVocityTsvDataFormat" : {
        "title" : "uniVocity TSV",
        "description" : "Marshal and unmarshal Java objects from and to TSV (Tab-Separated Values) records using UniVocity Parsers.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "as-map" : {
            "type" : "boolean",
            "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
            "title" : "As Map"
          },
          "comment" : {
            "type" : "string",
            "description" : "The comment symbol. The default value is #",
            "title" : "Comment",
            "default" : "#"
          },
          "empty-value" : {
            "type" : "string",
            "description" : "The String representation of an empty value",
            "title" : "Empty Value"
          },
          "escape-char" : {
            "type" : "string",
            "description" : "The escape character.",
            "title" : "Escape Char",
            "default" : "\\"
          },
          "header-extraction-enabled" : {
            "type" : "boolean",
            "description" : "Whether or not the header must be read in the first line of the test document The default value is false",
            "title" : "Header Extraction Enabled"
          },
          "headers-disabled" : {
            "type" : "boolean",
            "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
            "title" : "Headers Disabled"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "ignore-leading-whitespaces" : {
            "type" : "boolean",
            "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
            "title" : "Ignore Leading Whitespaces"
          },
          "ignore-trailing-whitespaces" : {
            "type" : "boolean",
            "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
            "title" : "Ignore Trailing Whitespaces"
          },
          "lazy-load" : {
            "type" : "boolean",
            "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one. The default value is false",
            "title" : "Lazy Load"
          },
          "line-separator" : {
            "type" : "string",
            "description" : "The line separator of the files The default value is to use the JVM platform line separator",
            "title" : "Line Separator"
          },
          "normalized-line-separator" : {
            "type" : "string",
            "description" : "The normalized line separator of the files The default value is a new line character.",
            "title" : "Normalized Line Separator",
            "default" : "\\n"
          },
          "null-value" : {
            "type" : "string",
            "description" : "The string representation of a null value. The default value is null",
            "title" : "Null Value"
          },
          "number-of-records-to-read" : {
            "type" : "number",
            "description" : "The maximum number of record to read.",
            "title" : "Number Of Records To Read"
          },
          "skip-empty-lines" : {
            "type" : "boolean",
            "description" : "Whether or not the empty lines must be ignored. The default value is true",
            "title" : "Skip Empty Lines"
          },
          "univocity-header" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityHeader"
            }
          }
        }
      },
      "org.apache.camel.model.dataformat.XMLSecurityDataFormat" : {
        "title" : "XML Security",
        "description" : "Encrypt and decrypt XML payloads using Apache Santuario.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "add-key-value-for-encrypted-key" : {
            "type" : "boolean",
            "description" : "Whether to add the public key used to encrypt the session key as a KeyValue in the EncryptedKey structure or not.",
            "title" : "Add Key Value For Encrypted Key"
          },
          "digest-algorithm" : {
            "type" : "string",
            "description" : "The digest algorithm to use with the RSA OAEP algorithm. The available choices are: XMLCipher.SHA1 XMLCipher.SHA256 XMLCipher.SHA512 The default value is XMLCipher.SHA1",
            "title" : "Digest Algorithm",
            "default" : "SHA1",
            "enum" : [ "SHA1", "SHA256", "SHA512" ]
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "key-cipher-algorithm" : {
            "type" : "string",
            "description" : "The cipher algorithm to be used for encryption/decryption of the asymmetric key. The available choices are: XMLCipher.RSA_v1dot5 XMLCipher.RSA_OAEP XMLCipher.RSA_OAEP_11 The default value is XMLCipher.RSA_OAEP",
            "title" : "Key Cipher Algorithm",
            "default" : "RSA_OAEP",
            "enum" : [ "RSA_v1dot5", "RSA_OAEP", "RSA_OAEP_11" ]
          },
          "key-or-trust-store-parameters-ref" : {
            "type" : "string",
            "description" : "Refers to a KeyStore instance to lookup in the registry, which is used for configuration options for creating and loading a KeyStore instance that represents the sender's trustStore or recipient's keyStore.",
            "title" : "Key Or Trust Store Parameters Ref"
          },
          "key-password" : {
            "type" : "string",
            "description" : "The password to be used for retrieving the private key from the KeyStore. This key is used for asymmetric decryption.",
            "title" : "Key Password"
          },
          "mgf-algorithm" : {
            "type" : "string",
            "description" : "The MGF Algorithm to use with the RSA OAEP algorithm. The available choices are: EncryptionConstants.MGF1_SHA1 EncryptionConstants.MGF1_SHA256 EncryptionConstants.MGF1_SHA512 The default value is EncryptionConstants.MGF1_SHA1",
            "title" : "Mgf Algorithm",
            "default" : "MGF1_SHA1",
            "enum" : [ "MGF1_SHA1", "MGF1_SHA256", "MGF1_SHA512" ]
          },
          "pass-phrase" : {
            "type" : "string",
            "description" : "A String used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
            "title" : "Pass Phrase"
          },
          "pass-phrase-byte" : {
            "type" : "string",
            "description" : "A byte used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
            "title" : "Pass Phrase Byte",
            "format" : "binary"
          },
          "recipient-key-alias" : {
            "type" : "string",
            "description" : "The key alias to be used when retrieving the recipient's public or private key from a KeyStore when performing asymmetric key encryption or decryption.",
            "title" : "Recipient Key Alias"
          },
          "secure-tag" : {
            "type" : "string",
            "description" : "The XPath reference to the XML Element selected for encryption/decryption. If no tag is specified, the entire payload is encrypted/decrypted.",
            "title" : "Secure Tag"
          },
          "secure-tag-contents" : {
            "type" : "boolean",
            "description" : "A boolean value to specify whether the XML Element is to be encrypted or the contents of the XML Element. false = Element Level. true = Element Content Level.",
            "title" : "Secure Tag Contents"
          },
          "xml-cipher-algorithm" : {
            "type" : "string",
            "description" : "The cipher algorithm to be used for encryption/decryption of the XML message content. The available choices are: XMLCipher.TRIPLEDES XMLCipher.AES_128 XMLCipher.AES_128_GCM XMLCipher.AES_192 XMLCipher.AES_192_GCM XMLCipher.AES_256 XMLCipher.AES_256_GCM XMLCipher.SEED_128 XMLCipher.CAMELLIA_128 XMLCipher.CAMELLIA_192 XMLCipher.CAMELLIA_256 The default value is XMLCipher.AES_256_GCM",
            "title" : "Xml Cipher Algorithm",
            "default" : "AES-256-GCM",
            "enum" : [ "TRIPLEDES", "AES_128", "AES_128_GCM", "AES_192", "AES_192_GCM", "AES_256", "AES_256_GCM", "SEED_128", "CAMELLIA_128", "CAMELLIA_192", "CAMELLIA_256" ]
          }
        }
      },
      "org.apache.camel.model.dataformat.YAMLDataFormat" : {
        "title" : "YAML",
        "description" : "Marshal and unmarshal Java objects to and from YAML.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-any-type" : {
            "type" : "boolean",
            "description" : "Allow any class to be un-marshaled",
            "title" : "Allow Any Type"
          },
          "allow-recursive-keys" : {
            "type" : "boolean",
            "description" : "Set whether recursive keys are allowed.",
            "title" : "Allow Recursive Keys"
          },
          "constructor" : {
            "type" : "string",
            "description" : "BaseConstructor to construct incoming documents.",
            "title" : "Constructor"
          },
          "dumper-options" : {
            "type" : "string",
            "description" : "DumperOptions to configure outgoing objects.",
            "title" : "Dumper Options"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "library" : {
            "type" : "string",
            "description" : "Which yaml library to use. By default it is SnakeYAML",
            "title" : "Library",
            "default" : "SnakeYAML",
            "enum" : [ "SnakeYAML" ]
          },
          "max-aliases-for-collections" : {
            "type" : "number",
            "description" : "Set the maximum amount of aliases allowed for collections.",
            "title" : "Max Aliases For Collections",
            "default" : "50"
          },
          "pretty-flow" : {
            "type" : "boolean",
            "description" : "Force the emitter to produce a pretty YAML document when using the flow style.",
            "title" : "Pretty Flow"
          },
          "representer" : {
            "type" : "string",
            "description" : "Representer to emit outgoing objects.",
            "title" : "Representer"
          },
          "resolver" : {
            "type" : "string",
            "description" : "Resolver to detect implicit type",
            "title" : "Resolver"
          },
          "type-filter" : {
            "type" : "array",
            "description" : "Set the types SnakeYAML is allowed to un-marshall",
            "title" : "Type Filter",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.YAMLTypeFilterDefinition"
            }
          },
          "unmarshal-type" : {
            "type" : "string",
            "description" : "Class name of the java type to use when unmarshalling",
            "title" : "Unmarshal Type"
          },
          "use-application-context-class-loader" : {
            "type" : "boolean",
            "description" : "Use ApplicationContextClassLoader as custom ClassLoader",
            "title" : "Use Application Context Class Loader"
          }
        }
      },
      "org.apache.camel.model.dataformat.YAMLTypeFilterDefinition" : {
        "title" : "YAML Type Filter",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Whether to filter by class type or regular expression",
            "title" : "Type"
          },
          "value" : {
            "type" : "string",
            "description" : "Value of type such as class name or regular expression",
            "title" : "Value"
          }
        }
      },
      "org.apache.camel.model.dataformat.ZipDeflaterDataFormat" : {
        "title" : "Zip Deflater",
        "description" : "Compress and decompress streams using java.util.zip.Deflater and java.util.zip.Inflater.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "compression-level" : {
            "type" : "string",
            "description" : "To specify a specific compression between 0-9. -1 is default compression, 0 is no compression, and 9 is the best compression.",
            "title" : "Compression Level",
            "default" : "-1",
            "enum" : [ "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.dataformat.ZipFileDataFormat" : {
        "title" : "Zip File",
        "description" : "Compression and decompress streams using java.util.zip.ZipStream.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allow-empty-directory" : {
            "type" : "boolean",
            "description" : "If the zip file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
            "title" : "Allow Empty Directory"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "max-decompressed-size" : {
            "type" : "number",
            "description" : "Set the maximum decompressed size of a zip file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
            "title" : "Max Decompressed Size",
            "default" : "1073741824"
          },
          "preserve-path-elements" : {
            "type" : "boolean",
            "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the zip file.",
            "title" : "Preserve Path Elements"
          },
          "using-iterator" : {
            "type" : "boolean",
            "description" : "If the zip file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
            "title" : "Using Iterator"
          }
        }
      },
      "org.apache.camel.model.errorhandler.DeadLetterChannelDefinition" : {
        "title" : "Dead Letter Channel",
        "description" : "Error handler with dead letter queue.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "dead-letter-handle-new-exception" : {
            "type" : "boolean",
            "description" : "Whether the dead letter channel should handle (and ignore) any new exception that may been thrown during sending the message to the dead letter endpoint. The default value is true which means any such kind of exception is handled and ignored. Set this to false to let the exception be propagated back on the org.apache.camel.Exchange . This can be used in situations where you use transactions, and want to use Camel's dead letter channel to deal with exceptions during routing, but if the dead letter channel itself fails because of a new exception being thrown, then by setting this to false the new exceptions is propagated back and set on the org.apache.camel.Exchange , which allows the transaction to detect the exception, and rollback.",
            "title" : "Dead Letter Handle New Exception"
          },
          "dead-letter-uri" : {
            "type" : "string",
            "description" : "The dead letter endpoint uri for the Dead Letter error handler.",
            "title" : "Dead Letter Uri"
          },
          "executor-service-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a thread pool to be used by the error handler",
            "title" : "Executor Service Ref"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "level" : {
            "type" : "string",
            "description" : "Logging level to use when using the logging error handler type.",
            "title" : "Level",
            "default" : "ERROR",
            "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
          },
          "log-name" : {
            "type" : "string",
            "description" : "Name of the logger to use for the logging error handler",
            "title" : "Log Name"
          },
          "logger-ref" : {
            "type" : "string",
            "description" : "References to a logger to use as logger for the error handler",
            "title" : "Logger Ref"
          },
          "on-exception-occurred-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
            "title" : "On Exception Occurred Ref"
          },
          "on-prepare-failure-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor to prepare the org.apache.camel.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
            "title" : "On Prepare Failure Ref"
          },
          "on-redelivery-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.apache.camel.Exchange before its being redelivered.",
            "title" : "On Redelivery Ref"
          },
          "redelivery-policy" : {
            "description" : "Sets the redelivery settings",
            "title" : "Redelivery Policy",
            "$ref" : "#/items/definitions/org.apache.camel.model.RedeliveryPolicyDefinition"
          },
          "redelivery-policy-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
            "title" : "Redelivery Policy Ref"
          },
          "retry-while-ref" : {
            "type" : "string",
            "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
            "title" : "Retry While Ref"
          },
          "use-original-body" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message body (original body only) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Body"
          },
          "use-original-message" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message (original body and headers) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Message"
          }
        },
        "required" : [ "dead-letter-uri" ]
      },
      "org.apache.camel.model.errorhandler.DefaultErrorHandlerDefinition" : {
        "title" : "Default Error Handler",
        "description" : "The default error handler.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "executor-service-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a thread pool to be used by the error handler",
            "title" : "Executor Service Ref"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "level" : {
            "type" : "string",
            "description" : "Logging level to use when using the logging error handler type.",
            "title" : "Level",
            "default" : "ERROR",
            "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
          },
          "log-name" : {
            "type" : "string",
            "description" : "Name of the logger to use for the logging error handler",
            "title" : "Log Name"
          },
          "logger-ref" : {
            "type" : "string",
            "description" : "References to a logger to use as logger for the error handler",
            "title" : "Logger Ref"
          },
          "on-exception-occurred-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
            "title" : "On Exception Occurred Ref"
          },
          "on-prepare-failure-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor to prepare the org.apache.camel.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
            "title" : "On Prepare Failure Ref"
          },
          "on-redelivery-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.apache.camel.Exchange before its being redelivered.",
            "title" : "On Redelivery Ref"
          },
          "redelivery-policy" : {
            "description" : "Sets the redelivery settings",
            "title" : "Redelivery Policy",
            "$ref" : "#/items/definitions/org.apache.camel.model.RedeliveryPolicyDefinition"
          },
          "redelivery-policy-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
            "title" : "Redelivery Policy Ref"
          },
          "retry-while-ref" : {
            "type" : "string",
            "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
            "title" : "Retry While Ref"
          },
          "use-original-body" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message body (original body only) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Body"
          },
          "use-original-message" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message (original body and headers) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Message"
          }
        }
      },
      "org.apache.camel.model.errorhandler.JtaTransactionErrorHandlerDefinition" : {
        "title" : "Jta Transaction Error Handler",
        "description" : "JTA based transactional error handler (requires camel-jta).",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "executor-service-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a thread pool to be used by the error handler",
            "title" : "Executor Service Ref"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "level" : {
            "type" : "string",
            "description" : "Logging level to use when using the logging error handler type.",
            "title" : "Level",
            "default" : "ERROR",
            "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
          },
          "log-name" : {
            "type" : "string",
            "description" : "Name of the logger to use for the logging error handler",
            "title" : "Log Name"
          },
          "logger-ref" : {
            "type" : "string",
            "description" : "References to a logger to use as logger for the error handler",
            "title" : "Logger Ref"
          },
          "on-exception-occurred-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
            "title" : "On Exception Occurred Ref"
          },
          "on-prepare-failure-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor to prepare the org.apache.camel.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
            "title" : "On Prepare Failure Ref"
          },
          "on-redelivery-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.apache.camel.Exchange before its being redelivered.",
            "title" : "On Redelivery Ref"
          },
          "redelivery-policy" : {
            "description" : "Sets the redelivery settings",
            "title" : "Redelivery Policy",
            "$ref" : "#/items/definitions/org.apache.camel.model.RedeliveryPolicyDefinition"
          },
          "redelivery-policy-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
            "title" : "Redelivery Policy Ref"
          },
          "retry-while-ref" : {
            "type" : "string",
            "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
            "title" : "Retry While Ref"
          },
          "rollback-logging-level" : {
            "type" : "string",
            "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
            "title" : "Rollback Logging Level",
            "default" : "WARN",
            "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
          },
          "transacted-policy-ref" : {
            "type" : "string",
            "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Camel will attempt to auto-discover.",
            "title" : "Transacted Policy Ref"
          },
          "use-original-body" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message body (original body only) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Body"
          },
          "use-original-message" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message (original body and headers) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Message"
          }
        }
      },
      "org.apache.camel.model.errorhandler.NoErrorHandlerDefinition" : {
        "title" : "No Error Handler",
        "description" : "To not use an error handler.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.errorhandler.RefErrorHandlerDefinition" : {
        "title" : "Ref Error Handler",
        "description" : "References to an existing or custom error handler.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "ref" : {
              "type" : "string",
              "description" : "References to an existing or custom error handler.",
              "title" : "Ref"
            }
          }
        } ],
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.errorhandler.SpringTransactionErrorHandlerDefinition" : {
        "title" : "Spring Transaction Error Handler",
        "description" : "Spring based transactional error handler (requires camel-spring).",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "executor-service-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a thread pool to be used by the error handler",
            "title" : "Executor Service Ref"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "level" : {
            "type" : "string",
            "description" : "Logging level to use when using the logging error handler type.",
            "title" : "Level",
            "default" : "ERROR",
            "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
          },
          "log-name" : {
            "type" : "string",
            "description" : "Name of the logger to use for the logging error handler",
            "title" : "Log Name"
          },
          "logger-ref" : {
            "type" : "string",
            "description" : "References to a logger to use as logger for the error handler",
            "title" : "Logger Ref"
          },
          "on-exception-occurred-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
            "title" : "On Exception Occurred Ref"
          },
          "on-prepare-failure-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor to prepare the org.apache.camel.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
            "title" : "On Prepare Failure Ref"
          },
          "on-redelivery-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.apache.camel.Exchange before its being redelivered.",
            "title" : "On Redelivery Ref"
          },
          "redelivery-policy" : {
            "description" : "Sets the redelivery settings",
            "title" : "Redelivery Policy",
            "$ref" : "#/items/definitions/org.apache.camel.model.RedeliveryPolicyDefinition"
          },
          "redelivery-policy-ref" : {
            "type" : "string",
            "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
            "title" : "Redelivery Policy Ref"
          },
          "retry-while-ref" : {
            "type" : "string",
            "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
            "title" : "Retry While Ref"
          },
          "rollback-logging-level" : {
            "type" : "string",
            "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
            "title" : "Rollback Logging Level",
            "default" : "WARN",
            "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ]
          },
          "transacted-policy-ref" : {
            "type" : "string",
            "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Camel will attempt to auto-discover.",
            "title" : "Transacted Policy Ref"
          },
          "use-original-body" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message body (original body only) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Body"
          },
          "use-original-message" : {
            "type" : "boolean",
            "description" : "Will use the original input org.apache.camel.Message (original body and headers) when an org.apache.camel.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.apache.camel.Exchange is doomed for failure. Instead of using the current inprogress org.apache.camel.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you route transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.apache.camel.Exchange again as the IN message is the same as when Camel received it. So you should be able to send the org.apache.camel.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.apache.camel.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original route), to ensure the body can be read when the original message is being used later. If the body is converted to org.apache.camel.StreamCache then the message body on the current org.apache.camel.Exchange is replaced with the org.apache.camel.StreamCache body. If the body is not converted to org.apache.camel.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.apache.camel.spi.UnitOfWork . An unit of work typically spans one route, or multiple routes if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-route (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
            "title" : "Use Original Message"
          }
        }
      },
      "org.apache.camel.model.language.CSimpleExpression" : {
        "title" : "CSimple",
        "description" : "Evaluate a compiled simple expression.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.ConstantExpression" : {
        "title" : "Constant",
        "description" : "A fixed value set only once during the route startup.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.DatasonnetExpression" : {
        "title" : "DataSonnet",
        "description" : "To use DataSonnet scripts for message transformations.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "body-media-type" : {
              "type" : "string",
              "description" : "The String representation of the message's body MediaType",
              "title" : "Body Media Type"
            },
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "output-media-type" : {
              "type" : "string",
              "description" : "The String representation of the MediaType to output",
              "title" : "Output Media Type"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.ExchangePropertyExpression" : {
        "title" : "ExchangeProperty",
        "description" : "Gets a property from the Exchange.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.ExpressionDefinition" : {
        "type" : "object",
        "properties" : {
          "constant" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ConstantExpression"
          },
          "csimple" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.CSimpleExpression"
          },
          "datasonnet" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.DatasonnetExpression"
          },
          "exchange-property" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExchangePropertyExpression"
          },
          "exchangeProperty" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExchangePropertyExpression"
          },
          "groovy" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.GroovyExpression"
          },
          "header" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.HeaderExpression"
          },
          "hl7terser" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.Hl7TerserExpression"
          },
          "joor" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JoorExpression"
          },
          "jq" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JqExpression"
          },
          "js" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JavaScriptExpression"
          },
          "jsonpath" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.JsonPathExpression"
          },
          "language" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.LanguageExpression"
          },
          "method" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.MethodCallExpression"
          },
          "mvel" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.MvelExpression"
          },
          "ognl" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.OgnlExpression"
          },
          "python" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.PythonExpression"
          },
          "ref" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.RefExpression"
          },
          "simple" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.SimpleExpression"
          },
          "spel" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.SpELExpression"
          },
          "tokenize" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.TokenizerExpression"
          },
          "xpath" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.XPathExpression"
          },
          "xquery" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.XQueryExpression"
          },
          "xtokenize" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.XMLTokenizerExpression"
          }
        }
      },
      "org.apache.camel.model.language.GroovyExpression" : {
        "title" : "Groovy",
        "description" : "Evaluates a Groovy script.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.HeaderExpression" : {
        "title" : "Header",
        "description" : "Gets a header from the Exchange.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.Hl7TerserExpression" : {
        "title" : "HL7 Terser",
        "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "header-name" : {
              "type" : "string",
              "description" : "Name of header to use as input, instead of the message body It has as higher precedent than the propertyName if both are set.",
              "title" : "Header Name"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "property-name" : {
              "type" : "string",
              "description" : "Name of property to use as input, instead of the message body. It has a lower precedent than the headerName if both are set.",
              "title" : "Property Name"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.JavaScriptExpression" : {
        "title" : "JavaScript",
        "description" : "Evaluates a JavaScript expression.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.JoorExpression" : {
        "title" : "jOOR",
        "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "pre-compile" : {
              "type" : "boolean",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "title" : "Pre Compile"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "single-quotes" : {
              "type" : "boolean",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "title" : "Single Quotes"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.JqExpression" : {
        "title" : "JQ",
        "description" : "Evaluates a JQ expression against a JSON message body.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "header-name" : {
              "type" : "string",
              "description" : "Name of header to use as input, instead of the message body It has as higher precedent than the propertyName if both are set.",
              "title" : "Header Name"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "property-name" : {
              "type" : "string",
              "description" : "Name of property to use as input, instead of the message body. It has a lower precedent than the headerName if both are set.",
              "title" : "Property Name"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.JsonPathExpression" : {
        "title" : "JSONPath",
        "description" : "Evaluates a JSONPath expression against a JSON message body.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "allow-easy-predicate" : {
              "type" : "boolean",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "title" : "Allow Easy Predicate"
            },
            "allow-simple" : {
              "type" : "boolean",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "title" : "Allow Simple"
            },
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "header-name" : {
              "type" : "string",
              "description" : "Name of header to use as input, instead of the message body It has as higher precedent than the propertyName if both are set.",
              "title" : "Header Name"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "option" : {
              "type" : "string",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "title" : "Option",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ]
            },
            "property-name" : {
              "type" : "string",
              "description" : "Name of property to use as input, instead of the message body. It has a lower precedent than the headerName if both are set.",
              "title" : "Property Name"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "suppress-exceptions" : {
              "type" : "boolean",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "title" : "Suppress Exceptions"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            },
            "unpack-array" : {
              "type" : "boolean",
              "description" : "Whether to unpack a single element json-array into an object.",
              "title" : "Unpack Array"
            },
            "write-as-string" : {
              "type" : "boolean",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "title" : "Write As String"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.LanguageExpression" : {
        "title" : "Language",
        "description" : "Evaluates a custom language.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "expression" : {
            "type" : "string",
            "description" : "The expression value in your chosen language syntax",
            "title" : "Expression"
          },
          "id" : {
            "type" : "string",
            "description" : "Sets the id of this node",
            "title" : "Id"
          },
          "language" : {
            "type" : "string",
            "description" : "The name of the language to use",
            "title" : "Language"
          },
          "trim" : {
            "type" : "boolean",
            "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
            "title" : "Trim"
          }
        },
        "required" : [ "expression", "language" ]
      },
      "org.apache.camel.model.language.MethodCallExpression" : {
        "title" : "Bean Method",
        "description" : "Calls a Java bean method.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "bean-type" : {
              "type" : "string",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "title" : "Bean Type"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "method" : {
              "type" : "string",
              "description" : "Name of method to call",
              "title" : "Method"
            },
            "ref" : {
              "type" : "string",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "title" : "Ref"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "scope" : {
              "type" : "string",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "title" : "Scope",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ]
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ]
      },
      "org.apache.camel.model.language.MvelExpression" : {
        "title" : "MVEL",
        "description" : "Evaluates a MVEL template.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.OgnlExpression" : {
        "title" : "OGNL",
        "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.PythonExpression" : {
        "title" : "Python",
        "description" : "Evaluates a Python expression.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.RefExpression" : {
        "title" : "Ref",
        "description" : "Uses an existing expression from the registry.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.SimpleExpression" : {
        "title" : "Simple",
        "description" : "Evaluates a Camel simple expression.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.SpELExpression" : {
        "title" : "SpEL",
        "description" : "Evaluates a Spring expression (SpEL).",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.TokenizerExpression" : {
        "title" : "Tokenize",
        "description" : "Tokenize text payloads using delimiter patterns.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "end-token" : {
              "type" : "string",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "title" : "End Token"
            },
            "group" : {
              "type" : "string",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "title" : "Group"
            },
            "group-delimiter" : {
              "type" : "string",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "title" : "Group Delimiter"
            },
            "header-name" : {
              "type" : "string",
              "description" : "Name of header to use as input, instead of the message body It has as higher precedent than the propertyName if both are set.",
              "title" : "Header Name"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "include-tokens" : {
              "type" : "boolean",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "title" : "Include Tokens"
            },
            "inherit-namespace-tag-name" : {
              "type" : "string",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "title" : "Inherit Namespace Tag Name"
            },
            "property-name" : {
              "type" : "string",
              "description" : "Name of property to use as input, instead of the message body. It has a lower precedent than the headerName if both are set.",
              "title" : "Property Name"
            },
            "regex" : {
              "type" : "boolean",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "title" : "Regex"
            },
            "skip-first" : {
              "type" : "boolean",
              "description" : "To skip the very first element",
              "title" : "Skip First"
            },
            "token" : {
              "type" : "string",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "title" : "Token"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            },
            "xml" : {
              "type" : "boolean",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "title" : "Xml"
            }
          }
        } ],
        "required" : [ "token" ]
      },
      "org.apache.camel.model.language.XMLTokenizerExpression" : {
        "title" : "XML Tokenize",
        "description" : "Tokenize XML payloads.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "group" : {
              "type" : "number",
              "description" : "To group N parts together",
              "title" : "Group"
            },
            "header-name" : {
              "type" : "string",
              "description" : "Name of header to use as input, instead of the message body It has as higher precedent than the propertyName if both are set.",
              "title" : "Header Name"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "mode" : {
              "type" : "string",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "title" : "Mode",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ]
            },
            "namespace" : {
              "type" : "array",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "title" : "Namespace",
              "items" : {
                "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
              }
            },
            "property-name" : {
              "type" : "string",
              "description" : "Name of property to use as input, instead of the message body. It has a lower precedent than the headerName if both are set.",
              "title" : "Property Name"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.XPathExpression" : {
        "title" : "XPath",
        "description" : "Evaluates an XPath expression against an XML payload.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "document-type" : {
              "type" : "string",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "title" : "Document Type"
            },
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "factory-ref" : {
              "type" : "string",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "title" : "Factory Ref"
            },
            "header-name" : {
              "type" : "string",
              "description" : "Name of header to use as input, instead of the message body It has as higher precedent than the propertyName if both are set.",
              "title" : "Header Name"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "log-namespaces" : {
              "type" : "boolean",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "title" : "Log Namespaces"
            },
            "namespace" : {
              "type" : "array",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "title" : "Namespace",
              "items" : {
                "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
              }
            },
            "object-model" : {
              "type" : "string",
              "description" : "The XPath object model to use",
              "title" : "Object Model"
            },
            "pre-compile" : {
              "type" : "boolean",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with camel-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "title" : "Pre Compile"
            },
            "property-name" : {
              "type" : "string",
              "description" : "Name of property to use as input, instead of the message body. It has a lower precedent than the headerName if both are set.",
              "title" : "Property Name"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class name of the result type (type from output) The default result type is NodeSet",
              "title" : "Result Type",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ]
            },
            "saxon" : {
              "type" : "boolean",
              "description" : "Whether to use Saxon.",
              "title" : "Saxon"
            },
            "thread-safety" : {
              "type" : "boolean",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Camel Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using camel-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "title" : "Thread Safety"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.language.XQueryExpression" : {
        "title" : "XQuery",
        "description" : "Evaluates an XQuery expressions against an XML payload.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "configuration-ref" : {
              "type" : "string",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires camel-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "title" : "Configuration Ref"
            },
            "expression" : {
              "type" : "string",
              "description" : "The expression value in your chosen language syntax",
              "title" : "Expression"
            },
            "header-name" : {
              "type" : "string",
              "description" : "Name of header to use as input, instead of the message body It has as higher precedent than the propertyName if both are set.",
              "title" : "Header Name"
            },
            "id" : {
              "type" : "string",
              "description" : "Sets the id of this node",
              "title" : "Id"
            },
            "namespace" : {
              "type" : "array",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "title" : "Namespace",
              "items" : {
                "$ref" : "#/items/definitions/org.apache.camel.model.PropertyDefinition"
              }
            },
            "property-name" : {
              "type" : "string",
              "description" : "Name of property to use as input, instead of the message body. It has a lower precedent than the headerName if both are set.",
              "title" : "Property Name"
            },
            "result-type" : {
              "type" : "string",
              "description" : "Sets the class of the result type (type from output)",
              "title" : "Result Type"
            },
            "trim" : {
              "type" : "boolean",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "title" : "Trim"
            },
            "type" : {
              "type" : "string",
              "description" : "Sets the class name of the result type (type from output) The default result type is NodeSet",
              "title" : "Type"
            }
          }
        } ],
        "required" : [ "expression" ]
      },
      "org.apache.camel.model.loadbalancer.CustomLoadBalancerDefinition" : {
        "title" : "Custom Load Balancer",
        "description" : "To use a custom load balancer implementation.",
        "deprecated" : "false",
        "oneOf" : [ {
          "type" : "string"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "The id of this node",
              "title" : "Id"
            },
            "ref" : {
              "type" : "string",
              "description" : "Refers to the custom load balancer to lookup from the registry",
              "title" : "Ref"
            }
          }
        } ],
        "required" : [ "ref" ]
      },
      "org.apache.camel.model.loadbalancer.FailoverLoadBalancerDefinition" : {
        "title" : "Failover",
        "description" : "In case of failures the exchange will be tried on the next endpoint.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "exception" : {
            "type" : "array",
            "description" : "A list of class names for specific exceptions to monitor. If no exceptions are configured then all exceptions are monitored",
            "title" : "Exception",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "maximum-failover-attempts" : {
            "type" : "string",
            "description" : "A value to indicate after X failover attempts we should exhaust (give up). Use -1 to indicate never give up and continuously try to failover. Use 0 to never failover. And use e.g. 3 to failover at most 3 times before giving up. his option can be used whether or not roundRobin is enabled or not.",
            "title" : "Maximum Failover Attempts",
            "default" : "-1"
          },
          "round-robin" : {
            "type" : "string",
            "description" : "Whether or not the failover load balancer should operate in round robin mode or not. If not, then it will always start from the first endpoint when a new message is to be processed. In other words it restart from the top for every message. If round robin is enabled, then it keeps state and will continue with the next endpoint in a round robin fashion. You can also enable sticky mode together with round robin, if so then it will pick the last known good endpoint to use when starting the load balancing (instead of using the next when starting).",
            "title" : "Round Robin"
          },
          "sticky" : {
            "type" : "string",
            "description" : "Whether or not the failover load balancer should operate in sticky mode or not. If not, then it will always start from the first endpoint when a new message is to be processed. In other words it restart from the top for every message. If sticky is enabled, then it keeps state and will continue with the last known good endpoint. You can also enable sticky mode together with round robin, if so then it will pick the last known good endpoint to use when starting the load balancing (instead of using the next when starting).",
            "title" : "Sticky"
          }
        }
      },
      "org.apache.camel.model.loadbalancer.RandomLoadBalancerDefinition" : {
        "title" : "Random",
        "description" : "The destination endpoints are selected by random.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.loadbalancer.RoundRobinLoadBalancerDefinition" : {
        "title" : "Round Robin",
        "description" : "The destination endpoints are selected in a round-robin fashion. This is a well known and classic policy, which spreads the load evenly.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.loadbalancer.StickyLoadBalancerDefinition" : {
        "title" : "Sticky",
        "description" : "Sticky load balancing using an expression to calculate a correlation key to perform the sticky load balancing.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "correlation-expression" : {
            "description" : "The correlation expression to use to calculate the correlation key",
            "title" : "Correlation Expression",
            "$ref" : "#/items/definitions/org.apache.camel.model.ExpressionSubElementDefinition"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.loadbalancer.TopicLoadBalancerDefinition" : {
        "title" : "Topic",
        "description" : "Topic which sends to all destinations.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          }
        }
      },
      "org.apache.camel.model.loadbalancer.WeightedLoadBalancerDefinition" : {
        "title" : "Weighted",
        "description" : "Uses a weighted load distribution ratio for each server with respect to others.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "distribution-ratio" : {
            "type" : "string",
            "description" : "The distribution ratio is a delimited String consisting on integer weights separated by delimiters for example 2,3,5. The distributionRatio must match the number of endpoints and/or processors specified in the load balancer list.",
            "title" : "Distribution Ratio"
          },
          "distribution-ratio-delimiter" : {
            "type" : "string",
            "description" : "Delimiter used to specify the distribution ratio. The default value is , (comma)",
            "title" : "Distribution Ratio Delimiter",
            "default" : ","
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this node",
            "title" : "Id"
          },
          "round-robin" : {
            "type" : "boolean",
            "description" : "To enable round robin mode. By default the weighted distribution mode is used. The default value is false.",
            "title" : "Round Robin"
          }
        },
        "required" : [ "distribution-ratio" ]
      },
      "org.apache.camel.model.rest.ApiKeyDefinition" : {
        "title" : "Api Key",
        "description" : "Rest security basic auth definition",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A short description for security scheme.",
            "title" : "Description"
          },
          "in-cookie" : {
            "type" : "boolean",
            "description" : "To use a cookie as the location of the API key.",
            "title" : "In Cookie"
          },
          "in-header" : {
            "type" : "boolean",
            "description" : "To use header as the location of the API key.",
            "title" : "In Header"
          },
          "in-query" : {
            "type" : "boolean",
            "description" : "To use query parameter as the location of the API key.",
            "title" : "In Query"
          },
          "key" : {
            "type" : "string",
            "description" : "Key used to refer to this security definition",
            "title" : "Key"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the header or query parameter to be used.",
            "title" : "Name"
          }
        },
        "required" : [ "key", "name" ]
      },
      "org.apache.camel.model.rest.BasicAuthDefinition" : {
        "title" : "Basic Auth",
        "description" : "Rest security basic auth definition",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A short description for security scheme.",
            "title" : "Description"
          },
          "key" : {
            "type" : "string",
            "description" : "Key used to refer to this security definition",
            "title" : "Key"
          }
        },
        "required" : [ "key" ]
      },
      "org.apache.camel.model.rest.BearerTokenDefinition" : {
        "title" : "Bearer Token",
        "description" : "Rest security bearer token authentication definition",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A short description for security scheme.",
            "title" : "Description"
          },
          "format" : {
            "type" : "string",
            "description" : "A hint to the client to identify how the bearer token is formatted.",
            "title" : "Format"
          },
          "key" : {
            "type" : "string",
            "description" : "Key used to refer to this security definition",
            "title" : "Key"
          }
        },
        "required" : [ "key" ]
      },
      "org.apache.camel.model.rest.DeleteDefinition" : {
        "title" : "Delete",
        "description" : "Rest DELETE command",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-docs" : {
            "type" : "boolean",
            "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
            "title" : "Api Docs"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
            "title" : "Consumes"
          },
          "deprecated" : {
            "type" : "boolean",
            "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
            "title" : "Deprecated"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "out-type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Out Type"
          },
          "param" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ParamDefinition"
            }
          },
          "path" : {
            "type" : "string",
            "description" : "The path mapping URIs of this REST operation such as /{id}.",
            "title" : "Path"
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
            "title" : "Produces"
          },
          "response-message" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ResponseMessageDefinition"
            }
          },
          "route-id" : {
            "type" : "string",
            "description" : "Sets the id of the route",
            "title" : "Route Id"
          },
          "security" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.SecurityDefinition"
            }
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
            "title" : "Skip Binding On Error Code"
          },
          "to" : {
            "description" : "The Camel endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call.",
            "title" : "To",
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDefinition"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Type"
          }
        }
      },
      "org.apache.camel.model.rest.GetDefinition" : {
        "title" : "Get",
        "description" : "Rest GET command",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-docs" : {
            "type" : "boolean",
            "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
            "title" : "Api Docs"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
            "title" : "Consumes"
          },
          "deprecated" : {
            "type" : "boolean",
            "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
            "title" : "Deprecated"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "out-type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Out Type"
          },
          "param" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ParamDefinition"
            }
          },
          "path" : {
            "type" : "string",
            "description" : "The path mapping URIs of this REST operation such as /{id}.",
            "title" : "Path"
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
            "title" : "Produces"
          },
          "response-message" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ResponseMessageDefinition"
            }
          },
          "route-id" : {
            "type" : "string",
            "description" : "Sets the id of the route",
            "title" : "Route Id"
          },
          "security" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.SecurityDefinition"
            }
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
            "title" : "Skip Binding On Error Code"
          },
          "to" : {
            "description" : "The Camel endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call.",
            "title" : "To",
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDefinition"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Type"
          }
        }
      },
      "org.apache.camel.model.rest.HeadDefinition" : {
        "title" : "Head",
        "description" : "Rest HEAD command",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-docs" : {
            "type" : "boolean",
            "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
            "title" : "Api Docs"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
            "title" : "Consumes"
          },
          "deprecated" : {
            "type" : "boolean",
            "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
            "title" : "Deprecated"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "out-type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Out Type"
          },
          "param" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ParamDefinition"
            }
          },
          "path" : {
            "type" : "string",
            "description" : "The path mapping URIs of this REST operation such as /{id}.",
            "title" : "Path"
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
            "title" : "Produces"
          },
          "response-message" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ResponseMessageDefinition"
            }
          },
          "route-id" : {
            "type" : "string",
            "description" : "Sets the id of the route",
            "title" : "Route Id"
          },
          "security" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.SecurityDefinition"
            }
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
            "title" : "Skip Binding On Error Code"
          },
          "to" : {
            "description" : "The Camel endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call.",
            "title" : "To",
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDefinition"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Type"
          }
        }
      },
      "org.apache.camel.model.rest.MutualTLSDefinition" : {
        "title" : "Mutual TLS",
        "description" : "Rest security mutual TLS authentication definition",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A short description for security scheme.",
            "title" : "Description"
          },
          "key" : {
            "type" : "string",
            "description" : "Key used to refer to this security definition",
            "title" : "Key"
          }
        },
        "required" : [ "key" ]
      },
      "org.apache.camel.model.rest.OAuth2Definition" : {
        "title" : "Oauth2",
        "description" : "Rest security OAuth2 definition",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "authorization-url" : {
            "type" : "string",
            "description" : "The authorization URL to be used for this flow. This SHOULD be in the form of a URL. Required for implicit and access code flows",
            "title" : "Authorization Url"
          },
          "description" : {
            "type" : "string",
            "description" : "A short description for security scheme.",
            "title" : "Description"
          },
          "flow" : {
            "type" : "string",
            "description" : "The flow used by the OAuth2 security scheme. Valid values are implicit, password, application or accessCode.",
            "title" : "Flow",
            "enum" : [ "implicit", "password", "application", "clientCredentials", "accessCode", "authorizationCode" ]
          },
          "key" : {
            "type" : "string",
            "description" : "Key used to refer to this security definition",
            "title" : "Key"
          },
          "refresh-url" : {
            "type" : "string",
            "description" : "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL.",
            "title" : "Refresh Url"
          },
          "scopes" : {
            "type" : "array",
            "description" : "The available scopes for an OAuth2 security scheme",
            "title" : "Scopes",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "token-url" : {
            "type" : "string",
            "description" : "The token URL to be used for this flow. This SHOULD be in the form of a URL. Required for password, application, and access code flows.",
            "title" : "Token Url"
          }
        },
        "required" : [ "key" ]
      },
      "org.apache.camel.model.rest.OpenIdConnectDefinition" : {
        "title" : "Open Id Connect",
        "description" : "Rest security OpenID Connect definition",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A short description for security scheme.",
            "title" : "Description"
          },
          "key" : {
            "type" : "string",
            "description" : "Key used to refer to this security definition",
            "title" : "Key"
          },
          "url" : {
            "type" : "string",
            "description" : "OpenId Connect URL to discover OAuth2 configuration values.",
            "title" : "Url"
          }
        },
        "required" : [ "key", "url" ]
      },
      "org.apache.camel.model.rest.ParamDefinition" : {
        "title" : "Param",
        "description" : "To specify the rest operation parameters.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allowable-values" : {
            "type" : "array",
            "description" : "Sets the parameter list of allowable values (enum).",
            "title" : "Allowable Values",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ValueDefinition"
            }
          },
          "array-type" : {
            "type" : "string",
            "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
            "title" : "Array Type",
            "default" : "string"
          },
          "collection-format" : {
            "type" : "string",
            "description" : "Sets the parameter collection format.",
            "title" : "Collection Format",
            "default" : "csv",
            "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ]
          },
          "data-format" : {
            "type" : "string",
            "description" : "Sets the parameter data format.",
            "title" : "Data Format"
          },
          "data-type" : {
            "type" : "string",
            "description" : "Sets the parameter data type.",
            "title" : "Data Type",
            "default" : "string"
          },
          "default-value" : {
            "type" : "string",
            "description" : "Sets the parameter default value.",
            "title" : "Default Value"
          },
          "description" : {
            "type" : "string",
            "description" : "Sets the parameter description.",
            "title" : "Description"
          },
          "examples" : {
            "type" : "array",
            "description" : "Sets the parameter examples.",
            "title" : "Examples",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "Sets the parameter name.",
            "title" : "Name"
          },
          "required" : {
            "type" : "boolean",
            "description" : "Sets the parameter required flag.",
            "title" : "Required"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the parameter type.",
            "title" : "Type",
            "default" : "path",
            "enum" : [ "body", "formData", "header", "path", "query" ]
          }
        },
        "required" : [ "name" ]
      },
      "org.apache.camel.model.rest.PatchDefinition" : {
        "title" : "Patch",
        "description" : "Rest PATCH command",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-docs" : {
            "type" : "boolean",
            "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
            "title" : "Api Docs"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
            "title" : "Consumes"
          },
          "deprecated" : {
            "type" : "boolean",
            "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
            "title" : "Deprecated"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "out-type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Out Type"
          },
          "param" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ParamDefinition"
            }
          },
          "path" : {
            "type" : "string",
            "description" : "The path mapping URIs of this REST operation such as /{id}.",
            "title" : "Path"
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
            "title" : "Produces"
          },
          "response-message" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ResponseMessageDefinition"
            }
          },
          "route-id" : {
            "type" : "string",
            "description" : "Sets the id of the route",
            "title" : "Route Id"
          },
          "security" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.SecurityDefinition"
            }
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
            "title" : "Skip Binding On Error Code"
          },
          "to" : {
            "description" : "The Camel endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call.",
            "title" : "To",
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDefinition"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Type"
          }
        }
      },
      "org.apache.camel.model.rest.PostDefinition" : {
        "title" : "Post",
        "description" : "Rest POST command",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-docs" : {
            "type" : "boolean",
            "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
            "title" : "Api Docs"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
            "title" : "Consumes"
          },
          "deprecated" : {
            "type" : "boolean",
            "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
            "title" : "Deprecated"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "out-type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Out Type"
          },
          "param" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ParamDefinition"
            }
          },
          "path" : {
            "type" : "string",
            "description" : "The path mapping URIs of this REST operation such as /{id}.",
            "title" : "Path"
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
            "title" : "Produces"
          },
          "response-message" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ResponseMessageDefinition"
            }
          },
          "route-id" : {
            "type" : "string",
            "description" : "Sets the id of the route",
            "title" : "Route Id"
          },
          "security" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.SecurityDefinition"
            }
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
            "title" : "Skip Binding On Error Code"
          },
          "to" : {
            "description" : "The Camel endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call.",
            "title" : "To",
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDefinition"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Type"
          }
        }
      },
      "org.apache.camel.model.rest.PutDefinition" : {
        "title" : "Put",
        "description" : "Rest PUT command",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-docs" : {
            "type" : "boolean",
            "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
            "title" : "Api Docs"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
            "title" : "Consumes"
          },
          "deprecated" : {
            "type" : "boolean",
            "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
            "title" : "Deprecated"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "out-type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Out Type"
          },
          "param" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ParamDefinition"
            }
          },
          "path" : {
            "type" : "string",
            "description" : "The path mapping URIs of this REST operation such as /{id}.",
            "title" : "Path"
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
            "title" : "Produces"
          },
          "response-message" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ResponseMessageDefinition"
            }
          },
          "route-id" : {
            "type" : "string",
            "description" : "Sets the id of the route",
            "title" : "Route Id"
          },
          "security" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.SecurityDefinition"
            }
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
            "title" : "Skip Binding On Error Code"
          },
          "to" : {
            "description" : "The Camel endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call.",
            "title" : "To",
            "$ref" : "#/items/definitions/org.apache.camel.model.ToDefinition"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Type"
          }
        }
      },
      "org.apache.camel.model.rest.ResponseHeaderDefinition" : {
        "title" : "Response Header",
        "description" : "To specify the rest operation response headers.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "allowable-values" : {
            "type" : "array",
            "description" : "Sets the parameter list of allowable values.",
            "title" : "Allowable Values",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.ValueDefinition"
            }
          },
          "array-type" : {
            "type" : "string",
            "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
            "title" : "Array Type",
            "default" : "string"
          },
          "collection-format" : {
            "type" : "string",
            "description" : "Sets the parameter collection format.",
            "title" : "Collection Format",
            "default" : "csv",
            "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ]
          },
          "data-format" : {
            "type" : "string",
            "description" : "Sets the parameter data format.",
            "title" : "Data Format"
          },
          "data-type" : {
            "type" : "string",
            "description" : "Sets the header data type.",
            "title" : "Data Type",
            "default" : "string"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the parameter.",
            "title" : "Description"
          },
          "example" : {
            "type" : "string",
            "description" : "Sets the example",
            "title" : "Example"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the parameter. This option is mandatory.",
            "title" : "Name"
          }
        },
        "required" : [ "name" ]
      },
      "org.apache.camel.model.rest.ResponseMessageDefinition" : {
        "title" : "Response Message",
        "description" : "To specify the rest operation response messages.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The response code such as a HTTP status code",
            "title" : "Code",
            "default" : "200"
          },
          "examples" : {
            "type" : "array",
            "description" : "Examples of response messages",
            "title" : "Examples",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "header" : {
            "type" : "array",
            "description" : "Adds a response header",
            "title" : "Header",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.ResponseHeaderDefinition"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "The response message (description)",
            "title" : "Message"
          },
          "response-model" : {
            "type" : "string",
            "description" : "The response model",
            "title" : "Response Model"
          }
        },
        "required" : [ "message" ]
      },
      "org.apache.camel.model.rest.RestBindingDefinition" : {
        "title" : "Rest Binding",
        "description" : "To configure rest binding",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "component" : {
            "type" : "string",
            "description" : "Sets the component name that this definition will apply to",
            "title" : "Component"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json",
            "title" : "Consumes"
          },
          "description" : {
            "type" : "string"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "out-type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from POJO to output for the outgoing data The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Out Type"
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json",
            "title" : "Produces"
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.",
            "title" : "Skip Binding On Error Code"
          },
          "type" : {
            "type" : "string",
            "description" : "Sets the class name to use for binding from input to POJO for the incoming data The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
            "title" : "Type"
          }
        }
      },
      "org.apache.camel.model.rest.RestConfigurationDefinition" : {
        "title" : "Rest Configuration",
        "description" : "To configure rest",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-component" : {
            "type" : "string",
            "description" : "The name of the Camel component to use as the REST API. If no API Component has been explicit configured, then Camel will lookup if there is a Camel component responsible for servicing and generating the REST API documentation, or if a org.apache.camel.spi.RestApiProcessorFactory is registered in the registry. If either one is found, then that is being used.",
            "title" : "Api Component",
            "enum" : [ "openapi", "swagger" ]
          },
          "api-context-path" : {
            "type" : "string",
            "description" : "Sets a leading API context-path the REST API services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path.",
            "title" : "Api Context Path"
          },
          "api-context-route-id" : {
            "type" : "string",
            "description" : "Sets the route id to use for the route that services the REST API. The route will by default use an auto assigned route id.",
            "title" : "Api Context Route Id"
          },
          "api-host" : {
            "type" : "string",
            "description" : "To use a specific hostname for the API documentation (such as swagger or openapi) This can be used to override the generated host with this configured hostname",
            "title" : "Api Host"
          },
          "api-property" : {
            "type" : "array",
            "description" : "Allows to configure as many additional properties for the api documentation. For example set property api.title to my cool stuff",
            "title" : "Api Property",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "api-vendor-extension" : {
            "type" : "boolean",
            "description" : "Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information as vendor extension (eg keys starting with x-) such as route ids, class names etc. Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.",
            "title" : "Api Vendor Extension"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. The default value is off",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "auto", "json", "json_xml", "off", "xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "component" : {
            "type" : "string",
            "description" : "The Camel Rest component to use for the REST transport (consumer), such as netty-http, jetty, servlet, undertow. If no component has been explicit configured, then Camel will lookup if there is a Camel component that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found, then that is being used.",
            "title" : "Component",
            "enum" : [ "platform-http", "servlet", "jetty", "undertow", "netty-http", "coap" ]
          },
          "component-property" : {
            "type" : "array",
            "description" : "Allows to configure as many additional properties for the rest component in use.",
            "title" : "Component Property",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "consumer-property" : {
            "type" : "array",
            "description" : "Allows to configure as many additional properties for the rest consumer in use.",
            "title" : "Consumer Property",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "context-path" : {
            "type" : "string",
            "description" : "Sets a leading context-path the REST services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path. Or for components such as camel-jetty or camel-netty-http that includes a HTTP server.",
            "title" : "Context Path"
          },
          "cors-headers" : {
            "type" : "array",
            "description" : "Allows to configure custom CORS headers.",
            "title" : "Cors Headers",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "data-format-property" : {
            "type" : "array",
            "description" : "Allows to configure as many additional properties for the data formats in use. For example set property prettyPrint to true to have json outputted in pretty mode. The properties can be prefixed to denote the option is only for either JSON or XML and for either the IN or the OUT. The prefixes are: json.in. json.out. xml.in. xml.out. For example a key with value xml.out.mustBeJAXBElement is only for the XML data format for the outgoing. A key without a prefix is a common key for all situations.",
            "title" : "Data Format Property",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "endpoint-property" : {
            "type" : "array",
            "description" : "Allows to configure as many additional properties for the rest endpoint in use.",
            "title" : "Endpoint Property",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestPropertyDefinition"
            }
          },
          "host" : {
            "type" : "string",
            "description" : "The hostname to use for exposing the REST service.",
            "title" : "Host"
          },
          "host-name-resolver" : {
            "type" : "string",
            "description" : "If no hostname has been explicit configured, then this resolver is used to compute the hostname the REST service will be using.",
            "title" : "Host Name Resolver",
            "default" : "allLocalIp",
            "enum" : [ "allLocalIp", "localHostName", "localIp" ]
          },
          "inline-routes" : {
            "type" : "boolean",
            "description" : "Inline routes in rest-dsl which are linked using direct endpoints. By default, each service in Rest DSL is an individual route, meaning that you would have at least two routes per service (rest-dsl, and the route linked from rest-dsl). Enabling this allows Camel to optimize and inline this as a single route, however this requires to use direct endpoints, which must be unique per service. This option is default false.",
            "title" : "Inline Routes"
          },
          "json-data-format" : {
            "type" : "string",
            "description" : "Name of specific json data format to use. By default jackson will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.",
            "title" : "Json Data Format"
          },
          "port" : {
            "type" : "string",
            "description" : "The port number to use for exposing the REST service. Notice if you use servlet component then the port number configured here does not apply, as the port number in use is the actual port number the servlet component is using. eg if using Apache Tomcat its the tomcat http port, if using Apache Karaf its the HTTP service in Karaf that uses port 8181 by default etc. Though in those situations setting the port number here, allows tooling and JMX to know the port number, so its recommended to set the port number to the number that the servlet engine uses.",
            "title" : "Port"
          },
          "producer-api-doc" : {
            "type" : "string",
            "description" : "Sets the location of the api document the REST producer will use to validate the REST uri and query parameters are valid accordingly to the api document. The location of the api document is loaded from classpath by default, but you can use file: or http: to refer to resources to load from file or http url.",
            "title" : "Producer Api Doc"
          },
          "producer-component" : {
            "type" : "string",
            "description" : "Sets the name of the Camel component to use as the REST producer",
            "title" : "Producer Component",
            "enum" : [ "vertx-http", "http", "undertow", "netty-http" ]
          },
          "scheme" : {
            "type" : "string",
            "description" : "The scheme to use for exposing the REST service. Usually http or https is supported. The default value is http",
            "title" : "Scheme"
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.",
            "title" : "Skip Binding On Error Code"
          },
          "use-x-forward-headers" : {
            "type" : "boolean",
            "description" : "Whether to use X-Forward headers for Host and related setting. The default value is true.",
            "title" : "Use XForward Headers"
          },
          "xml-data-format" : {
            "type" : "string",
            "description" : "Name of specific XML data format to use. By default jaxb will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.",
            "title" : "Xml Data Format"
          }
        }
      },
      "org.apache.camel.model.rest.RestDefinition" : {
        "title" : "Rest",
        "description" : "Defines a rest service using the rest-dsl",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-docs" : {
            "type" : "boolean",
            "description" : "Whether to include or exclude this rest operation in API documentation. This option will override what may be configured on a parent level. The default value is true.",
            "title" : "Api Docs"
          },
          "binding-mode" : {
            "type" : "string",
            "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is auto",
            "title" : "Binding Mode",
            "default" : "off",
            "enum" : [ "off", "auto", "json", "xml", "json_xml" ]
          },
          "client-request-validation" : {
            "type" : "boolean",
            "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
            "title" : "Client Request Validation"
          },
          "consumes" : {
            "type" : "string",
            "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
            "title" : "Consumes"
          },
          "delete" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.DeleteDefinition"
            }
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
            "title" : "Disabled"
          },
          "enable-cors" : {
            "type" : "boolean"
          },
          "get" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.GetDefinition"
            }
          },
          "head" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.HeadDefinition"
            }
          },
          "id" : {
            "type" : "string"
          },
          "patch" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.PatchDefinition"
            }
          },
          "path" : {
            "type" : "string",
            "description" : "Path of the rest service, such as /foo",
            "title" : "Path"
          },
          "post" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.PostDefinition"
            }
          },
          "produces" : {
            "type" : "string",
            "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
            "title" : "Produces"
          },
          "put" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.PutDefinition"
            }
          },
          "security-definitions" : {
            "description" : "Sets the security definitions such as Basic, OAuth2 etc.",
            "title" : "Security Definitions",
            "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestSecuritiesDefinition"
          },
          "security-requirements" : {
            "type" : "array",
            "description" : "Sets the security requirement(s) for all endpoints.",
            "title" : "Security Requirements",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.SecurityDefinition"
            }
          },
          "skip-binding-on-error-code" : {
            "type" : "boolean",
            "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
            "title" : "Skip Binding On Error Code"
          },
          "tag" : {
            "type" : "string",
            "description" : "To configure a special tag for the operations within this rest definition.",
            "title" : "Tag"
          }
        }
      },
      "org.apache.camel.model.rest.RestPropertyDefinition" : {
        "title" : "Rest Property",
        "description" : "A key value pair",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Property key",
            "title" : "Key"
          },
          "value" : {
            "type" : "string",
            "description" : "Property value",
            "title" : "Value"
          }
        },
        "required" : [ "key", "value" ]
      },
      "org.apache.camel.model.rest.RestSecuritiesDefinition" : {
        "title" : "Rest Security Definitions",
        "description" : "To configure rest security definitions.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "api-key" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.rest.ApiKeyDefinition"
          },
          "basic-auth" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.rest.BasicAuthDefinition"
          },
          "bearer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.rest.BearerTokenDefinition"
          },
          "mutual-tls" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.rest.MutualTLSDefinition"
          },
          "oauth2" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.rest.OAuth2Definition"
          },
          "open-id-connect" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.rest.OpenIdConnectDefinition"
          }
        }
      },
      "org.apache.camel.model.rest.RestsDefinition" : {
        "title" : "Rests",
        "description" : "A series of rest services defined using the rest-dsl",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "rest" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestDefinition"
            }
          }
        }
      },
      "org.apache.camel.model.rest.SecurityDefinition" : {
        "title" : "Rest Security",
        "description" : "Rest security definition",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Key used to refer to this security definition",
            "title" : "Key"
          },
          "scopes" : {
            "type" : "string",
            "description" : "The scopes to allow (separate multiple scopes by comma)",
            "title" : "Scopes"
          }
        },
        "required" : [ "key" ]
      },
      "org.apache.camel.model.transformer.CustomTransformerDefinition" : {
        "type" : "object",
        "properties" : {
          "class-name" : {
            "type" : "string"
          },
          "from-type" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "ref" : {
            "type" : "string"
          },
          "scheme" : {
            "type" : "string"
          },
          "to-type" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.transformer.DataFormatTransformerDefinition" : {
        "type" : "object",
        "properties" : {
          "asn1" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ASN1DataFormat"
          },
          "avro" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.AvroDataFormat"
          },
          "barcode" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BarcodeDataFormat"
          },
          "base64" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.Base64DataFormat"
          },
          "bindy" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.BindyDataFormat"
          },
          "cbor" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CBORDataFormat"
          },
          "crypto" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CryptoDataFormat"
          },
          "csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CsvDataFormat"
          },
          "custom" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.CustomDataFormat"
          },
          "fhir-json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirJsonDataFormat"
          },
          "fhir-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FhirXmlDataFormat"
          },
          "flatpack" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.FlatpackDataFormat"
          },
          "from-type" : {
            "type" : "string"
          },
          "grok" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GrokDataFormat"
          },
          "gzip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.GzipDeflaterDataFormat"
          },
          "hl7" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.HL7DataFormat"
          },
          "ical" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.IcalDataFormat"
          },
          "jackson-xml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JacksonXMLDataFormat"
          },
          "jaxb" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JaxbDataFormat"
          },
          "json" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonDataFormat"
          },
          "json-api" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.JsonApiDataFormat"
          },
          "lzf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.LZFDataFormat"
          },
          "mime-multipart" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.MimeMultipartDataFormat"
          },
          "name" : {
            "type" : "string"
          },
          "parquet-avro" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ParquetAvroDataFormat"
          },
          "pgp" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.PGPDataFormat"
          },
          "protobuf" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ProtobufDataFormat"
          },
          "rss" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.RssDataFormat"
          },
          "scheme" : {
            "type" : "string"
          },
          "soap" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SoapDataFormat"
          },
          "swift-mt" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMtDataFormat"
          },
          "swift-mx" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SwiftMxDataFormat"
          },
          "syslog" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.SyslogDataFormat"
          },
          "tar-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TarFileDataFormat"
          },
          "thrift" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ThriftDataFormat"
          },
          "tidy-markup" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.TidyMarkupDataFormat"
          },
          "to-type" : {
            "type" : "string"
          },
          "univocity-csv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityCsvDataFormat"
          },
          "univocity-fixed" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityFixedDataFormat"
          },
          "univocity-tsv" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.UniVocityTsvDataFormat"
          },
          "xml-security" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.XMLSecurityDataFormat"
          },
          "yaml" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.YAMLDataFormat"
          },
          "zip-deflater" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipDeflaterDataFormat"
          },
          "zip-file" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.dataformat.ZipFileDataFormat"
          }
        }
      },
      "org.apache.camel.model.transformer.EndpointTransformerDefinition" : {
        "type" : "object",
        "properties" : {
          "from-type" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "ref" : {
            "type" : "string"
          },
          "scheme" : {
            "type" : "string"
          },
          "to-type" : {
            "type" : "string"
          },
          "uri" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.transformer.LoadTransformerDefinition" : {
        "type" : "object",
        "properties" : {
          "defaults" : {
            "type" : "boolean"
          },
          "from-type" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "package-scan" : {
            "type" : "string"
          },
          "scheme" : {
            "type" : "string"
          },
          "to-type" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.transformer.TransformersDefinition" : {
        "title" : "Transformations",
        "description" : "To configure transformers.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "custom-transformer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.transformer.CustomTransformerDefinition"
          },
          "data-format-transformer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.transformer.DataFormatTransformerDefinition"
          },
          "endpoint-transformer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.transformer.EndpointTransformerDefinition"
          },
          "load-transformer" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.transformer.LoadTransformerDefinition"
          }
        }
      },
      "org.apache.camel.model.validator.CustomValidatorDefinition" : {
        "type" : "object",
        "properties" : {
          "class-name" : {
            "type" : "string"
          },
          "ref" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.validator.EndpointValidatorDefinition" : {
        "type" : "object",
        "properties" : {
          "ref" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "uri" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.validator.PredicateValidatorDefinition" : {
        "type" : "object",
        "properties" : {
          "expression" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.language.ExpressionDefinition"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "org.apache.camel.model.validator.ValidatorsDefinition" : {
        "title" : "Validations",
        "description" : "To configure validators.",
        "deprecated" : "false",
        "type" : "object",
        "properties" : {
          "custom-validator" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.validator.CustomValidatorDefinition"
          },
          "endpoint-validator" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.validator.EndpointValidatorDefinition"
          },
          "predicate-validator" : {
            "$ref" : "#/items/definitions/org.apache.camel.model.validator.PredicateValidatorDefinition"
          }
        }
      }
    },
    "properties" : {
      "beans" : {
        "$ref" : "#/items/definitions/org.apache.camel.dsl.yaml.deserializers.BeansDeserializer"
      },
      "error-handler" : {
        "$ref" : "#/items/definitions/org.apache.camel.dsl.yaml.deserializers.ErrorHandlerBuilderDeserializer"
      },
      "errorHandler" : {
        "$ref" : "#/items/definitions/org.apache.camel.dsl.yaml.deserializers.ErrorHandlerBuilderDeserializer"
      },
      "from" : {
        "$ref" : "#/items/definitions/org.apache.camel.dsl.yaml.deserializers.RouteFromDefinitionDeserializer"
      },
      "on-exception" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.OnExceptionDefinition"
      },
      "onException" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.OnExceptionDefinition"
      },
      "route-configuration" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.RouteConfigurationDefinition"
      },
      "routeConfiguration" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.RouteConfigurationDefinition"
      },
      "route" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.RouteDefinition"
      },
      "route-template" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.RouteTemplateDefinition"
      },
      "routeTemplate" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.RouteTemplateDefinition"
      },
      "templated-route" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.TemplatedRouteDefinition"
      },
      "templatedRoute" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.TemplatedRouteDefinition"
      },
      "rest-configuration" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestConfigurationDefinition"
      },
      "restConfiguration" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestConfigurationDefinition"
      },
      "rest" : {
        "$ref" : "#/items/definitions/org.apache.camel.model.rest.RestDefinition"
      }
    }
  }
}